// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: certtranscoordinator/certtranscoordinatorservicer.proto

package certtranscoordinator // import "github.com/linkai-io/am/protocservices/certtranscoordinator"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CTStatus int32

const (
	CTStatus_UNKNOWN CTStatus = 0
	CTStatus_STOPPED CTStatus = 1
	CTStatus_RUNNING CTStatus = 2
)

var CTStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "STOPPED",
	2: "RUNNING",
}
var CTStatus_value = map[string]int32{
	"UNKNOWN": 0,
	"STOPPED": 1,
	"RUNNING": 2,
}

func (x CTStatus) String() string {
	return proto.EnumName(CTStatus_name, int32(x))
}
func (CTStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_certtranscoordinatorservicer_abb62feeb8b6a299, []int{0}
}

type GetStatusRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStatusRequest) Reset()         { *m = GetStatusRequest{} }
func (m *GetStatusRequest) String() string { return proto.CompactTextString(m) }
func (*GetStatusRequest) ProtoMessage()    {}
func (*GetStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_certtranscoordinatorservicer_abb62feeb8b6a299, []int{0}
}
func (m *GetStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStatusRequest.Merge(dst, src)
}
func (m *GetStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetStatusRequest proto.InternalMessageInfo

type SetStatusRequest struct {
	Status               CTStatus `protobuf:"varint,1,opt,name=Status,proto3,enum=certtranscoordinator.CTStatus" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetStatusRequest) Reset()         { *m = SetStatusRequest{} }
func (m *SetStatusRequest) String() string { return proto.CompactTextString(m) }
func (*SetStatusRequest) ProtoMessage()    {}
func (*SetStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_certtranscoordinatorservicer_abb62feeb8b6a299, []int{1}
}
func (m *SetStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SetStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetStatusRequest.Merge(dst, src)
}
func (m *SetStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetStatusRequest proto.InternalMessageInfo

func (m *SetStatusRequest) GetStatus() CTStatus {
	if m != nil {
		return m.Status
	}
	return CTStatus_UNKNOWN
}

type StatusResponse struct {
	Status               CTStatus `protobuf:"varint,1,opt,name=Status,proto3,enum=certtranscoordinator.CTStatus" json:"Status,omitempty"`
	WorkerCount          int32    `protobuf:"varint,2,opt,name=WorkerCount,proto3" json:"WorkerCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusResponse) Reset()         { *m = StatusResponse{} }
func (m *StatusResponse) String() string { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()    {}
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_certtranscoordinatorservicer_abb62feeb8b6a299, []int{2}
}
func (m *StatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusResponse.Merge(dst, src)
}
func (m *StatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *StatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusResponse proto.InternalMessageInfo

func (m *StatusResponse) GetStatus() CTStatus {
	if m != nil {
		return m.Status
	}
	return CTStatus_UNKNOWN
}

func (m *StatusResponse) GetWorkerCount() int32 {
	if m != nil {
		return m.WorkerCount
	}
	return 0
}

type AddWorkerRequest struct {
	WorkerCount          int32    `protobuf:"varint,1,opt,name=WorkerCount,proto3" json:"WorkerCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddWorkerRequest) Reset()         { *m = AddWorkerRequest{} }
func (m *AddWorkerRequest) String() string { return proto.CompactTextString(m) }
func (*AddWorkerRequest) ProtoMessage()    {}
func (*AddWorkerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_certtranscoordinatorservicer_abb62feeb8b6a299, []int{3}
}
func (m *AddWorkerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddWorkerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddWorkerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AddWorkerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddWorkerRequest.Merge(dst, src)
}
func (m *AddWorkerRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddWorkerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddWorkerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddWorkerRequest proto.InternalMessageInfo

func (m *AddWorkerRequest) GetWorkerCount() int32 {
	if m != nil {
		return m.WorkerCount
	}
	return 0
}

type WorkerAddedResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkerAddedResponse) Reset()         { *m = WorkerAddedResponse{} }
func (m *WorkerAddedResponse) String() string { return proto.CompactTextString(m) }
func (*WorkerAddedResponse) ProtoMessage()    {}
func (*WorkerAddedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_certtranscoordinatorservicer_abb62feeb8b6a299, []int{4}
}
func (m *WorkerAddedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkerAddedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkerAddedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *WorkerAddedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerAddedResponse.Merge(dst, src)
}
func (m *WorkerAddedResponse) XXX_Size() int {
	return m.Size()
}
func (m *WorkerAddedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerAddedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerAddedResponse proto.InternalMessageInfo

type RemoveWorkerRequest struct {
	WorkerCount          int32    `protobuf:"varint,1,opt,name=WorkerCount,proto3" json:"WorkerCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveWorkerRequest) Reset()         { *m = RemoveWorkerRequest{} }
func (m *RemoveWorkerRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveWorkerRequest) ProtoMessage()    {}
func (*RemoveWorkerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_certtranscoordinatorservicer_abb62feeb8b6a299, []int{5}
}
func (m *RemoveWorkerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveWorkerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveWorkerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RemoveWorkerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveWorkerRequest.Merge(dst, src)
}
func (m *RemoveWorkerRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveWorkerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveWorkerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveWorkerRequest proto.InternalMessageInfo

func (m *RemoveWorkerRequest) GetWorkerCount() int32 {
	if m != nil {
		return m.WorkerCount
	}
	return 0
}

type WorkerRemovedResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkerRemovedResponse) Reset()         { *m = WorkerRemovedResponse{} }
func (m *WorkerRemovedResponse) String() string { return proto.CompactTextString(m) }
func (*WorkerRemovedResponse) ProtoMessage()    {}
func (*WorkerRemovedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_certtranscoordinatorservicer_abb62feeb8b6a299, []int{6}
}
func (m *WorkerRemovedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkerRemovedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkerRemovedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *WorkerRemovedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerRemovedResponse.Merge(dst, src)
}
func (m *WorkerRemovedResponse) XXX_Size() int {
	return m.Size()
}
func (m *WorkerRemovedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerRemovedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerRemovedResponse proto.InternalMessageInfo

type UpdateDurationRequest struct {
	NewDuration          int64    `protobuf:"varint,1,opt,name=NewDuration,proto3" json:"NewDuration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateDurationRequest) Reset()         { *m = UpdateDurationRequest{} }
func (m *UpdateDurationRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateDurationRequest) ProtoMessage()    {}
func (*UpdateDurationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_certtranscoordinatorservicer_abb62feeb8b6a299, []int{7}
}
func (m *UpdateDurationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDurationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDurationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateDurationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDurationRequest.Merge(dst, src)
}
func (m *UpdateDurationRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDurationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDurationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDurationRequest proto.InternalMessageInfo

func (m *UpdateDurationRequest) GetNewDuration() int64 {
	if m != nil {
		return m.NewDuration
	}
	return 0
}

type DurationUpdatedResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DurationUpdatedResponse) Reset()         { *m = DurationUpdatedResponse{} }
func (m *DurationUpdatedResponse) String() string { return proto.CompactTextString(m) }
func (*DurationUpdatedResponse) ProtoMessage()    {}
func (*DurationUpdatedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_certtranscoordinatorservicer_abb62feeb8b6a299, []int{8}
}
func (m *DurationUpdatedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DurationUpdatedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DurationUpdatedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DurationUpdatedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DurationUpdatedResponse.Merge(dst, src)
}
func (m *DurationUpdatedResponse) XXX_Size() int {
	return m.Size()
}
func (m *DurationUpdatedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DurationUpdatedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DurationUpdatedResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GetStatusRequest)(nil), "certtranscoordinator.GetStatusRequest")
	proto.RegisterType((*SetStatusRequest)(nil), "certtranscoordinator.SetStatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "certtranscoordinator.StatusResponse")
	proto.RegisterType((*AddWorkerRequest)(nil), "certtranscoordinator.AddWorkerRequest")
	proto.RegisterType((*WorkerAddedResponse)(nil), "certtranscoordinator.WorkerAddedResponse")
	proto.RegisterType((*RemoveWorkerRequest)(nil), "certtranscoordinator.RemoveWorkerRequest")
	proto.RegisterType((*WorkerRemovedResponse)(nil), "certtranscoordinator.WorkerRemovedResponse")
	proto.RegisterType((*UpdateDurationRequest)(nil), "certtranscoordinator.UpdateDurationRequest")
	proto.RegisterType((*DurationUpdatedResponse)(nil), "certtranscoordinator.DurationUpdatedResponse")
	proto.RegisterEnum("certtranscoordinator.CTStatus", CTStatus_name, CTStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CertTransCoordinatorClient is the client API for CertTransCoordinator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CertTransCoordinatorClient interface {
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	SetStatus(ctx context.Context, in *SetStatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	AddWorker(ctx context.Context, in *AddWorkerRequest, opts ...grpc.CallOption) (*WorkerAddedResponse, error)
	RemoveWorker(ctx context.Context, in *RemoveWorkerRequest, opts ...grpc.CallOption) (*WorkerRemovedResponse, error)
	UpdateDuration(ctx context.Context, in *UpdateDurationRequest, opts ...grpc.CallOption) (*DurationUpdatedResponse, error)
}

type certTransCoordinatorClient struct {
	cc *grpc.ClientConn
}

func NewCertTransCoordinatorClient(cc *grpc.ClientConn) CertTransCoordinatorClient {
	return &certTransCoordinatorClient{cc}
}

func (c *certTransCoordinatorClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/certtranscoordinator.CertTransCoordinator/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certTransCoordinatorClient) SetStatus(ctx context.Context, in *SetStatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/certtranscoordinator.CertTransCoordinator/SetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certTransCoordinatorClient) AddWorker(ctx context.Context, in *AddWorkerRequest, opts ...grpc.CallOption) (*WorkerAddedResponse, error) {
	out := new(WorkerAddedResponse)
	err := c.cc.Invoke(ctx, "/certtranscoordinator.CertTransCoordinator/AddWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certTransCoordinatorClient) RemoveWorker(ctx context.Context, in *RemoveWorkerRequest, opts ...grpc.CallOption) (*WorkerRemovedResponse, error) {
	out := new(WorkerRemovedResponse)
	err := c.cc.Invoke(ctx, "/certtranscoordinator.CertTransCoordinator/RemoveWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certTransCoordinatorClient) UpdateDuration(ctx context.Context, in *UpdateDurationRequest, opts ...grpc.CallOption) (*DurationUpdatedResponse, error) {
	out := new(DurationUpdatedResponse)
	err := c.cc.Invoke(ctx, "/certtranscoordinator.CertTransCoordinator/UpdateDuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CertTransCoordinatorServer is the server API for CertTransCoordinator service.
type CertTransCoordinatorServer interface {
	GetStatus(context.Context, *GetStatusRequest) (*StatusResponse, error)
	SetStatus(context.Context, *SetStatusRequest) (*StatusResponse, error)
	AddWorker(context.Context, *AddWorkerRequest) (*WorkerAddedResponse, error)
	RemoveWorker(context.Context, *RemoveWorkerRequest) (*WorkerRemovedResponse, error)
	UpdateDuration(context.Context, *UpdateDurationRequest) (*DurationUpdatedResponse, error)
}

func RegisterCertTransCoordinatorServer(s *grpc.Server, srv CertTransCoordinatorServer) {
	s.RegisterService(&_CertTransCoordinator_serviceDesc, srv)
}

func _CertTransCoordinator_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertTransCoordinatorServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certtranscoordinator.CertTransCoordinator/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertTransCoordinatorServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertTransCoordinator_SetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertTransCoordinatorServer).SetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certtranscoordinator.CertTransCoordinator/SetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertTransCoordinatorServer).SetStatus(ctx, req.(*SetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertTransCoordinator_AddWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertTransCoordinatorServer).AddWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certtranscoordinator.CertTransCoordinator/AddWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertTransCoordinatorServer).AddWorker(ctx, req.(*AddWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertTransCoordinator_RemoveWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertTransCoordinatorServer).RemoveWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certtranscoordinator.CertTransCoordinator/RemoveWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertTransCoordinatorServer).RemoveWorker(ctx, req.(*RemoveWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertTransCoordinator_UpdateDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertTransCoordinatorServer).UpdateDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certtranscoordinator.CertTransCoordinator/UpdateDuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertTransCoordinatorServer).UpdateDuration(ctx, req.(*UpdateDurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CertTransCoordinator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "certtranscoordinator.CertTransCoordinator",
	HandlerType: (*CertTransCoordinatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _CertTransCoordinator_GetStatus_Handler,
		},
		{
			MethodName: "SetStatus",
			Handler:    _CertTransCoordinator_SetStatus_Handler,
		},
		{
			MethodName: "AddWorker",
			Handler:    _CertTransCoordinator_AddWorker_Handler,
		},
		{
			MethodName: "RemoveWorker",
			Handler:    _CertTransCoordinator_RemoveWorker_Handler,
		},
		{
			MethodName: "UpdateDuration",
			Handler:    _CertTransCoordinator_UpdateDuration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "certtranscoordinator/certtranscoordinatorservicer.proto",
}

func (m *GetStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SetStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCerttranscoordinatorservicer(dAtA, i, uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCerttranscoordinatorservicer(dAtA, i, uint64(m.Status))
	}
	if m.WorkerCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCerttranscoordinatorservicer(dAtA, i, uint64(m.WorkerCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddWorkerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddWorkerRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WorkerCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCerttranscoordinatorservicer(dAtA, i, uint64(m.WorkerCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WorkerAddedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkerAddedResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RemoveWorkerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveWorkerRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WorkerCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCerttranscoordinatorservicer(dAtA, i, uint64(m.WorkerCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WorkerRemovedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkerRemovedResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateDurationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDurationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NewDuration != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCerttranscoordinatorservicer(dAtA, i, uint64(m.NewDuration))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DurationUpdatedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DurationUpdatedResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintCerttranscoordinatorservicer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovCerttranscoordinatorservicer(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovCerttranscoordinatorservicer(uint64(m.Status))
	}
	if m.WorkerCount != 0 {
		n += 1 + sovCerttranscoordinatorservicer(uint64(m.WorkerCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddWorkerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkerCount != 0 {
		n += 1 + sovCerttranscoordinatorservicer(uint64(m.WorkerCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkerAddedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveWorkerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkerCount != 0 {
		n += 1 + sovCerttranscoordinatorservicer(uint64(m.WorkerCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WorkerRemovedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateDurationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewDuration != 0 {
		n += 1 + sovCerttranscoordinatorservicer(uint64(m.NewDuration))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DurationUpdatedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCerttranscoordinatorservicer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCerttranscoordinatorservicer(x uint64) (n int) {
	return sovCerttranscoordinatorservicer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCerttranscoordinatorservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCerttranscoordinatorservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCerttranscoordinatorservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCerttranscoordinatorservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCerttranscoordinatorservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (CTStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCerttranscoordinatorservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCerttranscoordinatorservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCerttranscoordinatorservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCerttranscoordinatorservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (CTStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerCount", wireType)
			}
			m.WorkerCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCerttranscoordinatorservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCerttranscoordinatorservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCerttranscoordinatorservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddWorkerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCerttranscoordinatorservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddWorkerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddWorkerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerCount", wireType)
			}
			m.WorkerCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCerttranscoordinatorservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCerttranscoordinatorservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCerttranscoordinatorservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkerAddedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCerttranscoordinatorservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkerAddedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkerAddedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCerttranscoordinatorservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCerttranscoordinatorservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveWorkerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCerttranscoordinatorservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveWorkerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveWorkerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerCount", wireType)
			}
			m.WorkerCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCerttranscoordinatorservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCerttranscoordinatorservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCerttranscoordinatorservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkerRemovedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCerttranscoordinatorservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkerRemovedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkerRemovedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCerttranscoordinatorservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCerttranscoordinatorservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDurationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCerttranscoordinatorservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDurationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDurationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewDuration", wireType)
			}
			m.NewDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCerttranscoordinatorservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewDuration |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCerttranscoordinatorservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCerttranscoordinatorservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DurationUpdatedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCerttranscoordinatorservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DurationUpdatedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DurationUpdatedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCerttranscoordinatorservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCerttranscoordinatorservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCerttranscoordinatorservicer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCerttranscoordinatorservicer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCerttranscoordinatorservicer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCerttranscoordinatorservicer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCerttranscoordinatorservicer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCerttranscoordinatorservicer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCerttranscoordinatorservicer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCerttranscoordinatorservicer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCerttranscoordinatorservicer   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("certtranscoordinator/certtranscoordinatorservicer.proto", fileDescriptor_certtranscoordinatorservicer_abb62feeb8b6a299)
}

var fileDescriptor_certtranscoordinatorservicer_abb62feeb8b6a299 = []byte{
	// 441 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xc1, 0xae, 0xd2, 0x40,
	0x18, 0x85, 0xef, 0x5c, 0xf5, 0x2a, 0xff, 0x35, 0xa4, 0x19, 0x20, 0x60, 0x17, 0x0d, 0x69, 0x8c,
	0x41, 0x0d, 0x6d, 0x44, 0x23, 0x31, 0xae, 0xb0, 0x18, 0xa2, 0xc6, 0x42, 0x5a, 0x08, 0xc1, 0x85,
	0x49, 0x69, 0x47, 0xad, 0x40, 0x07, 0xa7, 0x53, 0xdc, 0xfb, 0x14, 0x3e, 0x92, 0x4b, 0x1f, 0xc1,
	0xe0, 0x8b, 0x98, 0x52, 0x0a, 0xb5, 0x4e, 0x35, 0xb2, 0xeb, 0x9c, 0x9c, 0xf3, 0x75, 0x32, 0xff,
	0xc9, 0x0f, 0x5d, 0x97, 0x30, 0xce, 0x99, 0x13, 0x84, 0x2e, 0xa5, 0xcc, 0xf3, 0x03, 0x87, 0x53,
	0xa6, 0x8b, 0xc4, 0x90, 0xb0, 0x8d, 0xef, 0x12, 0xa6, 0xad, 0x19, 0xe5, 0x14, 0x57, 0x45, 0x1e,
	0x15, 0x83, 0x34, 0x20, 0xdc, 0xe6, 0x0e, 0x8f, 0x42, 0x8b, 0x7c, 0x8a, 0x48, 0xc8, 0xd5, 0x97,
	0x20, 0xd9, 0x39, 0x0d, 0x3f, 0x86, 0x8b, 0x44, 0x68, 0xa0, 0x26, 0x6a, 0x95, 0x3b, 0x8a, 0x26,
	0xc2, 0x69, 0xc6, 0x78, 0x1f, 0xdb, 0xbb, 0xd5, 0x8f, 0x50, 0x4e, 0x41, 0xe1, 0x9a, 0x06, 0x21,
	0x39, 0x95, 0x84, 0x9b, 0x70, 0x39, 0xa5, 0x6c, 0x41, 0x98, 0x41, 0xa3, 0x80, 0x37, 0xce, 0x9b,
	0xa8, 0x75, 0xcd, 0xca, 0x4a, 0xea, 0x23, 0x90, 0x7a, 0x9e, 0x97, 0x28, 0xe9, 0xbd, 0x73, 0x29,
	0xf4, 0x67, 0xaa, 0x06, 0x95, 0xe4, 0xd8, 0xf3, 0x3c, 0xe2, 0xa5, 0xd7, 0x54, 0xbb, 0x50, 0xb1,
	0xc8, 0x8a, 0x6e, 0xc8, 0xff, 0xf2, 0xea, 0x50, 0x4b, 0x23, 0x71, 0xfc, 0x48, 0x7c, 0x02, 0xb5,
	0xc9, 0xda, 0x73, 0x38, 0xe9, 0x47, 0xcc, 0xe1, 0x3e, 0x0d, 0x32, 0x4c, 0x93, 0x7c, 0x4e, 0xd5,
	0x1d, 0xf3, 0x8a, 0x95, 0x95, 0xd4, 0x5b, 0x50, 0x4f, 0xbf, 0x13, 0xc4, 0x81, 0x7a, 0xef, 0x01,
	0xdc, 0x48, 0x9f, 0x0a, 0x5f, 0xc2, 0xf5, 0x89, 0xf9, 0xca, 0x1c, 0x4e, 0x4d, 0xe9, 0x2c, 0x3e,
	0xd8, 0xe3, 0xe1, 0x68, 0xf4, 0xbc, 0x2f, 0xa1, 0xf8, 0x60, 0x4d, 0x4c, 0xf3, 0x85, 0x39, 0x90,
	0xce, 0x3b, 0x5f, 0xae, 0x42, 0xd5, 0x20, 0x8c, 0x8f, 0xe3, 0x37, 0x37, 0x8e, 0x6f, 0x8e, 0x67,
	0x50, 0x3a, 0x94, 0x01, 0xdf, 0x11, 0xcf, 0x25, 0xdf, 0x16, 0xf9, 0xb6, 0xd8, 0x97, 0x9b, 0xfa,
	0x0c, 0x4a, 0xf6, 0xbf, 0xd0, 0xf6, 0x69, 0xe8, 0xb7, 0x50, 0x3a, 0x8c, 0xbd, 0x08, 0x9d, 0xef,
	0x85, 0x7c, 0x57, 0xec, 0x13, 0x34, 0x01, 0xbf, 0x83, 0x9b, 0xd9, 0x26, 0xe0, 0x82, 0xa8, 0xa0,
	0x2d, 0xf2, 0xfd, 0xbf, 0xfd, 0x25, 0xd7, 0x0f, 0xbc, 0x84, 0xf2, 0xef, 0xfd, 0xc0, 0x05, 0x71,
	0x61, 0x8b, 0xe4, 0xb6, 0xd8, 0x5c, 0xd0, 0x9b, 0x67, 0xaf, 0xbf, 0x6d, 0x15, 0xf4, 0x7d, 0xab,
	0xa0, 0x1f, 0x5b, 0x05, 0x7d, 0xfd, 0xa9, 0x9c, 0xbd, 0x79, 0xfa, 0xde, 0xe7, 0x1f, 0xa2, 0xb9,
	0xe6, 0xd2, 0x95, 0xbe, 0xf4, 0x83, 0x85, 0xe3, 0xb7, 0x7d, 0xaa, 0x3b, 0x2b, 0x7d, 0xb7, 0x3f,
	0xdc, 0xfd, 0x3a, 0x09, 0x85, 0xbb, 0x66, 0x7e, 0xb1, 0x33, 0x3d, 0xfc, 0x15, 0x00, 0x00, 0xff,
	0xff, 0xd8, 0x93, 0xae, 0x77, 0x9f, 0x04, 0x00, 0x00,
}
