// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: scangroup/scangroupservicer.proto

/*
	Package scangroup is a generated protocol buffer package.

	It is generated from these files:
		scangroup/scangroupservicer.proto

	It has these top-level messages:
		NSModuleConfig
		BruteModuleConfig
		PortModuleConfig
		WebModuleConfig
		ModuleConfiguration
		Group
		NewGroupRequest
		GroupCreatedResponse
		UpdateGroupRequest
		GroupUpdatedResponse
		DeleteGroupRequest
		GroupDeletedResponse
		GroupRequest
		GroupsRequest
		GroupResponse
		Address
		AddressesRequest
		AddressesResponse
		AddAddressRequest
		FailedAddress
		AddAddressesResponse
		UpdateAddressRequest
		UpdateAddressesResponse
*/
package scangroup

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import user "gopkg.linkai.io/v1/repos/am/protocservices/prototypes"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NSModuleConfig struct {
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *NSModuleConfig) Reset()                    { *m = NSModuleConfig{} }
func (m *NSModuleConfig) String() string            { return proto.CompactTextString(m) }
func (*NSModuleConfig) ProtoMessage()               {}
func (*NSModuleConfig) Descriptor() ([]byte, []int) { return fileDescriptorScangroupservicer, []int{0} }

func (m *NSModuleConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type BruteModuleConfig struct {
	Name           string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	CustomSubNames []string `protobuf:"bytes,2,rep,name=CustomSubNames" json:"CustomSubNames,omitempty"`
	MaxDepth       int32    `protobuf:"varint,3,opt,name=MaxDepth,proto3" json:"MaxDepth,omitempty"`
}

func (m *BruteModuleConfig) Reset()         { *m = BruteModuleConfig{} }
func (m *BruteModuleConfig) String() string { return proto.CompactTextString(m) }
func (*BruteModuleConfig) ProtoMessage()    {}
func (*BruteModuleConfig) Descriptor() ([]byte, []int) {
	return fileDescriptorScangroupservicer, []int{1}
}

func (m *BruteModuleConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BruteModuleConfig) GetCustomSubNames() []string {
	if m != nil {
		return m.CustomSubNames
	}
	return nil
}

func (m *BruteModuleConfig) GetMaxDepth() int32 {
	if m != nil {
		return m.MaxDepth
	}
	return 0
}

type PortModuleConfig struct {
	Name  string  `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Ports []int32 `protobuf:"varint,2,rep,packed,name=Ports" json:"Ports,omitempty"`
}

func (m *PortModuleConfig) Reset()         { *m = PortModuleConfig{} }
func (m *PortModuleConfig) String() string { return proto.CompactTextString(m) }
func (*PortModuleConfig) ProtoMessage()    {}
func (*PortModuleConfig) Descriptor() ([]byte, []int) {
	return fileDescriptorScangroupservicer, []int{2}
}

func (m *PortModuleConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PortModuleConfig) GetPorts() []int32 {
	if m != nil {
		return m.Ports
	}
	return nil
}

type WebModuleConfig struct {
	Name                  string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	TakeScreenShots       bool   `protobuf:"varint,2,opt,name=TakeScreenShots,proto3" json:"TakeScreenShots,omitempty"`
	MaxLinks              int32  `protobuf:"varint,3,opt,name=MaxLinks,proto3" json:"MaxLinks,omitempty"`
	ExtractJS             bool   `protobuf:"varint,4,opt,name=ExtractJS,proto3" json:"ExtractJS,omitempty"`
	FingerprintFrameworks bool   `protobuf:"varint,5,opt,name=FingerprintFrameworks,proto3" json:"FingerprintFrameworks,omitempty"`
}

func (m *WebModuleConfig) Reset()                    { *m = WebModuleConfig{} }
func (m *WebModuleConfig) String() string            { return proto.CompactTextString(m) }
func (*WebModuleConfig) ProtoMessage()               {}
func (*WebModuleConfig) Descriptor() ([]byte, []int) { return fileDescriptorScangroupservicer, []int{3} }

func (m *WebModuleConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WebModuleConfig) GetTakeScreenShots() bool {
	if m != nil {
		return m.TakeScreenShots
	}
	return false
}

func (m *WebModuleConfig) GetMaxLinks() int32 {
	if m != nil {
		return m.MaxLinks
	}
	return 0
}

func (m *WebModuleConfig) GetExtractJS() bool {
	if m != nil {
		return m.ExtractJS
	}
	return false
}

func (m *WebModuleConfig) GetFingerprintFrameworks() bool {
	if m != nil {
		return m.FingerprintFrameworks
	}
	return false
}

type ModuleConfiguration struct {
	NSConfig           *NSModuleConfig    `protobuf:"bytes,1,opt,name=NSConfig" json:"NSConfig,omitempty"`
	BruteConfig        *BruteModuleConfig `protobuf:"bytes,2,opt,name=BruteConfig" json:"BruteConfig,omitempty"`
	PortConfig         *PortModuleConfig  `protobuf:"bytes,3,opt,name=PortConfig" json:"PortConfig,omitempty"`
	WebModuleConfig    *WebModuleConfig   `protobuf:"bytes,4,opt,name=WebModuleConfig" json:"WebModuleConfig,omitempty"`
	DailyScanSchedules []int64            `protobuf:"varint,5,rep,packed,name=DailyScanSchedules" json:"DailyScanSchedules,omitempty"`
}

func (m *ModuleConfiguration) Reset()         { *m = ModuleConfiguration{} }
func (m *ModuleConfiguration) String() string { return proto.CompactTextString(m) }
func (*ModuleConfiguration) ProtoMessage()    {}
func (*ModuleConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptorScangroupservicer, []int{4}
}

func (m *ModuleConfiguration) GetNSConfig() *NSModuleConfig {
	if m != nil {
		return m.NSConfig
	}
	return nil
}

func (m *ModuleConfiguration) GetBruteConfig() *BruteModuleConfig {
	if m != nil {
		return m.BruteConfig
	}
	return nil
}

func (m *ModuleConfiguration) GetPortConfig() *PortModuleConfig {
	if m != nil {
		return m.PortConfig
	}
	return nil
}

func (m *ModuleConfiguration) GetWebModuleConfig() *WebModuleConfig {
	if m != nil {
		return m.WebModuleConfig
	}
	return nil
}

func (m *ModuleConfiguration) GetDailyScanSchedules() []int64 {
	if m != nil {
		return m.DailyScanSchedules
	}
	return nil
}

type Group struct {
	OrgID               int32                `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	GroupID             int32                `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	GroupName           string               `protobuf:"bytes,3,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
	CreationTime        int64                `protobuf:"varint,4,opt,name=CreationTime,proto3" json:"CreationTime,omitempty"`
	CreatedBy           int32                `protobuf:"varint,5,opt,name=CreatedBy,proto3" json:"CreatedBy,omitempty"`
	OriginalInput       []byte               `protobuf:"bytes,6,opt,name=OriginalInput,proto3" json:"OriginalInput,omitempty"`
	ModuleConfiguration *ModuleConfiguration `protobuf:"bytes,7,opt,name=ModuleConfiguration" json:"ModuleConfiguration,omitempty"`
	Deleted             bool                 `protobuf:"varint,8,opt,name=Deleted,proto3" json:"Deleted,omitempty"`
}

func (m *Group) Reset()                    { *m = Group{} }
func (m *Group) String() string            { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()               {}
func (*Group) Descriptor() ([]byte, []int) { return fileDescriptorScangroupservicer, []int{5} }

func (m *Group) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *Group) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *Group) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *Group) GetCreationTime() int64 {
	if m != nil {
		return m.CreationTime
	}
	return 0
}

func (m *Group) GetCreatedBy() int32 {
	if m != nil {
		return m.CreatedBy
	}
	return 0
}

func (m *Group) GetOriginalInput() []byte {
	if m != nil {
		return m.OriginalInput
	}
	return nil
}

func (m *Group) GetModuleConfiguration() *ModuleConfiguration {
	if m != nil {
		return m.ModuleConfiguration
	}
	return nil
}

func (m *Group) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

type NewGroupRequest struct {
	UserContext *user.UserContext `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	Group       *Group            `protobuf:"bytes,2,opt,name=Group" json:"Group,omitempty"`
}

func (m *NewGroupRequest) Reset()                    { *m = NewGroupRequest{} }
func (m *NewGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*NewGroupRequest) ProtoMessage()               {}
func (*NewGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptorScangroupservicer, []int{6} }

func (m *NewGroupRequest) GetUserContext() *user.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *NewGroupRequest) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

type GroupCreatedResponse struct {
	OrgID   int32 `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	GroupID int32 `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
}

func (m *GroupCreatedResponse) Reset()         { *m = GroupCreatedResponse{} }
func (m *GroupCreatedResponse) String() string { return proto.CompactTextString(m) }
func (*GroupCreatedResponse) ProtoMessage()    {}
func (*GroupCreatedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorScangroupservicer, []int{7}
}

func (m *GroupCreatedResponse) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *GroupCreatedResponse) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

type UpdateGroupRequest struct {
	UserContext *user.UserContext `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	Group       *Group            `protobuf:"bytes,2,opt,name=Group" json:"Group,omitempty"`
	GroupID     int32             `protobuf:"varint,3,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	GroupName   string            `protobuf:"bytes,4,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
}

func (m *UpdateGroupRequest) Reset()         { *m = UpdateGroupRequest{} }
func (m *UpdateGroupRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateGroupRequest) ProtoMessage()    {}
func (*UpdateGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorScangroupservicer, []int{8}
}

func (m *UpdateGroupRequest) GetUserContext() *user.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *UpdateGroupRequest) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *UpdateGroupRequest) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *UpdateGroupRequest) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

type GroupUpdatedResponse struct {
	OrgID   int32 `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	GroupID int32 `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
}

func (m *GroupUpdatedResponse) Reset()         { *m = GroupUpdatedResponse{} }
func (m *GroupUpdatedResponse) String() string { return proto.CompactTextString(m) }
func (*GroupUpdatedResponse) ProtoMessage()    {}
func (*GroupUpdatedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorScangroupservicer, []int{9}
}

func (m *GroupUpdatedResponse) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *GroupUpdatedResponse) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

type DeleteGroupRequest struct {
	UserContext *user.UserContext `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	GroupID     int32             `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
}

func (m *DeleteGroupRequest) Reset()         { *m = DeleteGroupRequest{} }
func (m *DeleteGroupRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteGroupRequest) ProtoMessage()    {}
func (*DeleteGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorScangroupservicer, []int{10}
}

func (m *DeleteGroupRequest) GetUserContext() *user.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *DeleteGroupRequest) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

type GroupDeletedResponse struct {
	OrgID   int32 `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	GroupID int32 `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
}

func (m *GroupDeletedResponse) Reset()         { *m = GroupDeletedResponse{} }
func (m *GroupDeletedResponse) String() string { return proto.CompactTextString(m) }
func (*GroupDeletedResponse) ProtoMessage()    {}
func (*GroupDeletedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorScangroupservicer, []int{11}
}

func (m *GroupDeletedResponse) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *GroupDeletedResponse) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

type GroupRequest struct {
	UserContext *user.UserContext `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	GroupID     int32             `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	GroupName   string            `protobuf:"bytes,4,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
}

func (m *GroupRequest) Reset()                    { *m = GroupRequest{} }
func (m *GroupRequest) String() string            { return proto.CompactTextString(m) }
func (*GroupRequest) ProtoMessage()               {}
func (*GroupRequest) Descriptor() ([]byte, []int) { return fileDescriptorScangroupservicer, []int{12} }

func (m *GroupRequest) GetUserContext() *user.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *GroupRequest) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *GroupRequest) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

type GroupsRequest struct {
	UserContext *user.UserContext `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
}

func (m *GroupsRequest) Reset()                    { *m = GroupsRequest{} }
func (m *GroupsRequest) String() string            { return proto.CompactTextString(m) }
func (*GroupsRequest) ProtoMessage()               {}
func (*GroupsRequest) Descriptor() ([]byte, []int) { return fileDescriptorScangroupservicer, []int{13} }

func (m *GroupsRequest) GetUserContext() *user.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

type GroupResponse struct {
	OrgID int32  `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	Group *Group `protobuf:"bytes,2,opt,name=Group" json:"Group,omitempty"`
}

func (m *GroupResponse) Reset()                    { *m = GroupResponse{} }
func (m *GroupResponse) String() string            { return proto.CompactTextString(m) }
func (*GroupResponse) ProtoMessage()               {}
func (*GroupResponse) Descriptor() ([]byte, []int) { return fileDescriptorScangroupservicer, []int{14} }

func (m *GroupResponse) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *GroupResponse) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

type Address struct {
	OrgID     int32                `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	AddressID int64                `protobuf:"varint,2,opt,name=AddressID,proto3" json:"AddressID,omitempty"`
	GroupID   int32                `protobuf:"varint,3,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	Address   string               `protobuf:"bytes,4,opt,name=Address,proto3" json:"Address,omitempty"`
	Settings  *ModuleConfiguration `protobuf:"bytes,5,opt,name=Settings" json:"Settings,omitempty"`
	AddedTime int64                `protobuf:"varint,6,opt,name=AddedTime,proto3" json:"AddedTime,omitempty"`
	AddedBy   string               `protobuf:"bytes,7,opt,name=AddedBy,proto3" json:"AddedBy,omitempty"`
	Ignored   bool                 `protobuf:"varint,8,opt,name=Ignored,proto3" json:"Ignored,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptorScangroupservicer, []int{15} }

func (m *Address) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *Address) GetAddressID() int64 {
	if m != nil {
		return m.AddressID
	}
	return 0
}

func (m *Address) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *Address) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Address) GetSettings() *ModuleConfiguration {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *Address) GetAddedTime() int64 {
	if m != nil {
		return m.AddedTime
	}
	return 0
}

func (m *Address) GetAddedBy() string {
	if m != nil {
		return m.AddedBy
	}
	return ""
}

func (m *Address) GetIgnored() bool {
	if m != nil {
		return m.Ignored
	}
	return false
}

type AddressesRequest struct {
	UserContext *user.UserContext `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	GroupID     int32             `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	Ignore      bool              `protobuf:"varint,4,opt,name=Ignore,proto3" json:"Ignore,omitempty"`
}

func (m *AddressesRequest) Reset()         { *m = AddressesRequest{} }
func (m *AddressesRequest) String() string { return proto.CompactTextString(m) }
func (*AddressesRequest) ProtoMessage()    {}
func (*AddressesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorScangroupservicer, []int{16}
}

func (m *AddressesRequest) GetUserContext() *user.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *AddressesRequest) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *AddressesRequest) GetIgnore() bool {
	if m != nil {
		return m.Ignore
	}
	return false
}

type AddressesResponse struct {
	OrgID     int32    `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	Addresses *Address `protobuf:"bytes,2,opt,name=Addresses" json:"Addresses,omitempty"`
}

func (m *AddressesResponse) Reset()         { *m = AddressesResponse{} }
func (m *AddressesResponse) String() string { return proto.CompactTextString(m) }
func (*AddressesResponse) ProtoMessage()    {}
func (*AddressesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorScangroupservicer, []int{17}
}

func (m *AddressesResponse) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *AddressesResponse) GetAddresses() *Address {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type AddAddressRequest struct {
	UserContext *user.UserContext    `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	GroupID     int32                `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	AddedTime   int64                `protobuf:"varint,3,opt,name=AddedTime,proto3" json:"AddedTime,omitempty"`
	AddedBy     string               `protobuf:"bytes,4,opt,name=AddedBy,proto3" json:"AddedBy,omitempty"`
	Address     string               `protobuf:"bytes,5,opt,name=Address,proto3" json:"Address,omitempty"`
	Settings    *ModuleConfiguration `protobuf:"bytes,6,opt,name=Settings" json:"Settings,omitempty"`
	Ignored     bool                 `protobuf:"varint,7,opt,name=Ignored,proto3" json:"Ignored,omitempty"`
}

func (m *AddAddressRequest) Reset()         { *m = AddAddressRequest{} }
func (m *AddAddressRequest) String() string { return proto.CompactTextString(m) }
func (*AddAddressRequest) ProtoMessage()    {}
func (*AddAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorScangroupservicer, []int{18}
}

func (m *AddAddressRequest) GetUserContext() *user.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *AddAddressRequest) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *AddAddressRequest) GetAddedTime() int64 {
	if m != nil {
		return m.AddedTime
	}
	return 0
}

func (m *AddAddressRequest) GetAddedBy() string {
	if m != nil {
		return m.AddedBy
	}
	return ""
}

func (m *AddAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AddAddressRequest) GetSettings() *ModuleConfiguration {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *AddAddressRequest) GetIgnored() bool {
	if m != nil {
		return m.Ignored
	}
	return false
}

type FailedAddress struct {
	FailedAddress string `protobuf:"bytes,1,opt,name=FailedAddress,proto3" json:"FailedAddress,omitempty"`
	Reason        string `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (m *FailedAddress) Reset()                    { *m = FailedAddress{} }
func (m *FailedAddress) String() string            { return proto.CompactTextString(m) }
func (*FailedAddress) ProtoMessage()               {}
func (*FailedAddress) Descriptor() ([]byte, []int) { return fileDescriptorScangroupservicer, []int{19} }

func (m *FailedAddress) GetFailedAddress() string {
	if m != nil {
		return m.FailedAddress
	}
	return ""
}

func (m *FailedAddress) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type AddAddressesResponse struct {
	OrgID           int32            `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	CountAdded      int32            `protobuf:"varint,2,opt,name=CountAdded,proto3" json:"CountAdded,omitempty"`
	FailedAddresses []*FailedAddress `protobuf:"bytes,3,rep,name=FailedAddresses" json:"FailedAddresses,omitempty"`
}

func (m *AddAddressesResponse) Reset()         { *m = AddAddressesResponse{} }
func (m *AddAddressesResponse) String() string { return proto.CompactTextString(m) }
func (*AddAddressesResponse) ProtoMessage()    {}
func (*AddAddressesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorScangroupservicer, []int{20}
}

func (m *AddAddressesResponse) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *AddAddressesResponse) GetCountAdded() int32 {
	if m != nil {
		return m.CountAdded
	}
	return 0
}

func (m *AddAddressesResponse) GetFailedAddresses() []*FailedAddress {
	if m != nil {
		return m.FailedAddresses
	}
	return nil
}

type UpdateAddressRequest struct {
	OrgID     int32                `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	GroupID   int32                `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	AddressID int32                `protobuf:"varint,3,opt,name=AddressID,proto3" json:"AddressID,omitempty"`
	Address   string               `protobuf:"bytes,4,opt,name=Address,proto3" json:"Address,omitempty"`
	Settings  *ModuleConfiguration `protobuf:"bytes,5,opt,name=Settings" json:"Settings,omitempty"`
	Ignored   bool                 `protobuf:"varint,6,opt,name=Ignored,proto3" json:"Ignored,omitempty"`
}

func (m *UpdateAddressRequest) Reset()         { *m = UpdateAddressRequest{} }
func (m *UpdateAddressRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateAddressRequest) ProtoMessage()    {}
func (*UpdateAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorScangroupservicer, []int{21}
}

func (m *UpdateAddressRequest) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *UpdateAddressRequest) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *UpdateAddressRequest) GetAddressID() int32 {
	if m != nil {
		return m.AddressID
	}
	return 0
}

func (m *UpdateAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UpdateAddressRequest) GetSettings() *ModuleConfiguration {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *UpdateAddressRequest) GetIgnored() bool {
	if m != nil {
		return m.Ignored
	}
	return false
}

type UpdateAddressesResponse struct {
	OrgID           int32            `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	CountUpdated    int32            `protobuf:"varint,2,opt,name=CountUpdated,proto3" json:"CountUpdated,omitempty"`
	FailedAddresses []*FailedAddress `protobuf:"bytes,3,rep,name=FailedAddresses" json:"FailedAddresses,omitempty"`
}

func (m *UpdateAddressesResponse) Reset()         { *m = UpdateAddressesResponse{} }
func (m *UpdateAddressesResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateAddressesResponse) ProtoMessage()    {}
func (*UpdateAddressesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorScangroupservicer, []int{22}
}

func (m *UpdateAddressesResponse) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *UpdateAddressesResponse) GetCountUpdated() int32 {
	if m != nil {
		return m.CountUpdated
	}
	return 0
}

func (m *UpdateAddressesResponse) GetFailedAddresses() []*FailedAddress {
	if m != nil {
		return m.FailedAddresses
	}
	return nil
}

func init() {
	proto.RegisterType((*NSModuleConfig)(nil), "scangroup.NSModuleConfig")
	proto.RegisterType((*BruteModuleConfig)(nil), "scangroup.BruteModuleConfig")
	proto.RegisterType((*PortModuleConfig)(nil), "scangroup.PortModuleConfig")
	proto.RegisterType((*WebModuleConfig)(nil), "scangroup.WebModuleConfig")
	proto.RegisterType((*ModuleConfiguration)(nil), "scangroup.ModuleConfiguration")
	proto.RegisterType((*Group)(nil), "scangroup.Group")
	proto.RegisterType((*NewGroupRequest)(nil), "scangroup.NewGroupRequest")
	proto.RegisterType((*GroupCreatedResponse)(nil), "scangroup.GroupCreatedResponse")
	proto.RegisterType((*UpdateGroupRequest)(nil), "scangroup.UpdateGroupRequest")
	proto.RegisterType((*GroupUpdatedResponse)(nil), "scangroup.GroupUpdatedResponse")
	proto.RegisterType((*DeleteGroupRequest)(nil), "scangroup.DeleteGroupRequest")
	proto.RegisterType((*GroupDeletedResponse)(nil), "scangroup.GroupDeletedResponse")
	proto.RegisterType((*GroupRequest)(nil), "scangroup.GroupRequest")
	proto.RegisterType((*GroupsRequest)(nil), "scangroup.GroupsRequest")
	proto.RegisterType((*GroupResponse)(nil), "scangroup.GroupResponse")
	proto.RegisterType((*Address)(nil), "scangroup.Address")
	proto.RegisterType((*AddressesRequest)(nil), "scangroup.AddressesRequest")
	proto.RegisterType((*AddressesResponse)(nil), "scangroup.AddressesResponse")
	proto.RegisterType((*AddAddressRequest)(nil), "scangroup.AddAddressRequest")
	proto.RegisterType((*FailedAddress)(nil), "scangroup.FailedAddress")
	proto.RegisterType((*AddAddressesResponse)(nil), "scangroup.AddAddressesResponse")
	proto.RegisterType((*UpdateAddressRequest)(nil), "scangroup.UpdateAddressRequest")
	proto.RegisterType((*UpdateAddressesResponse)(nil), "scangroup.UpdateAddressesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ScanGroup service

type ScanGroupClient interface {
	Get(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupResponse, error)
	GetByName(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupResponse, error)
	Create(ctx context.Context, in *NewGroupRequest, opts ...grpc.CallOption) (*GroupCreatedResponse, error)
	Update(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*GroupUpdatedResponse, error)
	Delete(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*GroupDeletedResponse, error)
	Groups(ctx context.Context, in *GroupsRequest, opts ...grpc.CallOption) (ScanGroup_GroupsClient, error)
	Addresses(ctx context.Context, in *AddressesRequest, opts ...grpc.CallOption) (ScanGroup_AddressesClient, error)
	AddAddresses(ctx context.Context, opts ...grpc.CallOption) (ScanGroup_AddAddressesClient, error)
	UpdatedAddresses(ctx context.Context, opts ...grpc.CallOption) (ScanGroup_UpdatedAddressesClient, error)
}

type scanGroupClient struct {
	cc *grpc.ClientConn
}

func NewScanGroupClient(cc *grpc.ClientConn) ScanGroupClient {
	return &scanGroupClient{cc}
}

func (c *scanGroupClient) Get(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupResponse, error) {
	out := new(GroupResponse)
	err := grpc.Invoke(ctx, "/scangroup.ScanGroup/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scanGroupClient) GetByName(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupResponse, error) {
	out := new(GroupResponse)
	err := grpc.Invoke(ctx, "/scangroup.ScanGroup/GetByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scanGroupClient) Create(ctx context.Context, in *NewGroupRequest, opts ...grpc.CallOption) (*GroupCreatedResponse, error) {
	out := new(GroupCreatedResponse)
	err := grpc.Invoke(ctx, "/scangroup.ScanGroup/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scanGroupClient) Update(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*GroupUpdatedResponse, error) {
	out := new(GroupUpdatedResponse)
	err := grpc.Invoke(ctx, "/scangroup.ScanGroup/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scanGroupClient) Delete(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*GroupDeletedResponse, error) {
	out := new(GroupDeletedResponse)
	err := grpc.Invoke(ctx, "/scangroup.ScanGroup/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scanGroupClient) Groups(ctx context.Context, in *GroupsRequest, opts ...grpc.CallOption) (ScanGroup_GroupsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ScanGroup_serviceDesc.Streams[0], c.cc, "/scangroup.ScanGroup/Groups", opts...)
	if err != nil {
		return nil, err
	}
	x := &scanGroupGroupsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ScanGroup_GroupsClient interface {
	Recv() (*GroupResponse, error)
	grpc.ClientStream
}

type scanGroupGroupsClient struct {
	grpc.ClientStream
}

func (x *scanGroupGroupsClient) Recv() (*GroupResponse, error) {
	m := new(GroupResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *scanGroupClient) Addresses(ctx context.Context, in *AddressesRequest, opts ...grpc.CallOption) (ScanGroup_AddressesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ScanGroup_serviceDesc.Streams[1], c.cc, "/scangroup.ScanGroup/Addresses", opts...)
	if err != nil {
		return nil, err
	}
	x := &scanGroupAddressesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ScanGroup_AddressesClient interface {
	Recv() (*AddressesResponse, error)
	grpc.ClientStream
}

type scanGroupAddressesClient struct {
	grpc.ClientStream
}

func (x *scanGroupAddressesClient) Recv() (*AddressesResponse, error) {
	m := new(AddressesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *scanGroupClient) AddAddresses(ctx context.Context, opts ...grpc.CallOption) (ScanGroup_AddAddressesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ScanGroup_serviceDesc.Streams[2], c.cc, "/scangroup.ScanGroup/AddAddresses", opts...)
	if err != nil {
		return nil, err
	}
	x := &scanGroupAddAddressesClient{stream}
	return x, nil
}

type ScanGroup_AddAddressesClient interface {
	Send(*AddAddressRequest) error
	CloseAndRecv() (*AddAddressesResponse, error)
	grpc.ClientStream
}

type scanGroupAddAddressesClient struct {
	grpc.ClientStream
}

func (x *scanGroupAddAddressesClient) Send(m *AddAddressRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *scanGroupAddAddressesClient) CloseAndRecv() (*AddAddressesResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AddAddressesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *scanGroupClient) UpdatedAddresses(ctx context.Context, opts ...grpc.CallOption) (ScanGroup_UpdatedAddressesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ScanGroup_serviceDesc.Streams[3], c.cc, "/scangroup.ScanGroup/UpdatedAddresses", opts...)
	if err != nil {
		return nil, err
	}
	x := &scanGroupUpdatedAddressesClient{stream}
	return x, nil
}

type ScanGroup_UpdatedAddressesClient interface {
	Send(*UpdateAddressRequest) error
	CloseAndRecv() (*UpdateAddressesResponse, error)
	grpc.ClientStream
}

type scanGroupUpdatedAddressesClient struct {
	grpc.ClientStream
}

func (x *scanGroupUpdatedAddressesClient) Send(m *UpdateAddressRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *scanGroupUpdatedAddressesClient) CloseAndRecv() (*UpdateAddressesResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UpdateAddressesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ScanGroup service

type ScanGroupServer interface {
	Get(context.Context, *GroupRequest) (*GroupResponse, error)
	GetByName(context.Context, *GroupRequest) (*GroupResponse, error)
	Create(context.Context, *NewGroupRequest) (*GroupCreatedResponse, error)
	Update(context.Context, *UpdateGroupRequest) (*GroupUpdatedResponse, error)
	Delete(context.Context, *DeleteGroupRequest) (*GroupDeletedResponse, error)
	Groups(*GroupsRequest, ScanGroup_GroupsServer) error
	Addresses(*AddressesRequest, ScanGroup_AddressesServer) error
	AddAddresses(ScanGroup_AddAddressesServer) error
	UpdatedAddresses(ScanGroup_UpdatedAddressesServer) error
}

func RegisterScanGroupServer(s *grpc.Server, srv ScanGroupServer) {
	s.RegisterService(&_ScanGroup_serviceDesc, srv)
}

func _ScanGroup_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScanGroupServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scangroup.ScanGroup/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScanGroupServer).Get(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScanGroup_GetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScanGroupServer).GetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scangroup.ScanGroup/GetByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScanGroupServer).GetByName(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScanGroup_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScanGroupServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scangroup.ScanGroup/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScanGroupServer).Create(ctx, req.(*NewGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScanGroup_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScanGroupServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scangroup.ScanGroup/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScanGroupServer).Update(ctx, req.(*UpdateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScanGroup_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScanGroupServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scangroup.ScanGroup/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScanGroupServer).Delete(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScanGroup_Groups_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GroupsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ScanGroupServer).Groups(m, &scanGroupGroupsServer{stream})
}

type ScanGroup_GroupsServer interface {
	Send(*GroupResponse) error
	grpc.ServerStream
}

type scanGroupGroupsServer struct {
	grpc.ServerStream
}

func (x *scanGroupGroupsServer) Send(m *GroupResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ScanGroup_Addresses_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AddressesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ScanGroupServer).Addresses(m, &scanGroupAddressesServer{stream})
}

type ScanGroup_AddressesServer interface {
	Send(*AddressesResponse) error
	grpc.ServerStream
}

type scanGroupAddressesServer struct {
	grpc.ServerStream
}

func (x *scanGroupAddressesServer) Send(m *AddressesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ScanGroup_AddAddresses_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ScanGroupServer).AddAddresses(&scanGroupAddAddressesServer{stream})
}

type ScanGroup_AddAddressesServer interface {
	SendAndClose(*AddAddressesResponse) error
	Recv() (*AddAddressRequest, error)
	grpc.ServerStream
}

type scanGroupAddAddressesServer struct {
	grpc.ServerStream
}

func (x *scanGroupAddAddressesServer) SendAndClose(m *AddAddressesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *scanGroupAddAddressesServer) Recv() (*AddAddressRequest, error) {
	m := new(AddAddressRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ScanGroup_UpdatedAddresses_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ScanGroupServer).UpdatedAddresses(&scanGroupUpdatedAddressesServer{stream})
}

type ScanGroup_UpdatedAddressesServer interface {
	SendAndClose(*UpdateAddressesResponse) error
	Recv() (*UpdateAddressRequest, error)
	grpc.ServerStream
}

type scanGroupUpdatedAddressesServer struct {
	grpc.ServerStream
}

func (x *scanGroupUpdatedAddressesServer) SendAndClose(m *UpdateAddressesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *scanGroupUpdatedAddressesServer) Recv() (*UpdateAddressRequest, error) {
	m := new(UpdateAddressRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ScanGroup_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scangroup.ScanGroup",
	HandlerType: (*ScanGroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ScanGroup_Get_Handler,
		},
		{
			MethodName: "GetByName",
			Handler:    _ScanGroup_GetByName_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ScanGroup_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ScanGroup_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ScanGroup_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Groups",
			Handler:       _ScanGroup_Groups_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Addresses",
			Handler:       _ScanGroup_Addresses_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddAddresses",
			Handler:       _ScanGroup_AddAddresses_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UpdatedAddresses",
			Handler:       _ScanGroup_UpdatedAddresses_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "scangroup/scangroupservicer.proto",
}

func (m *NSModuleConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSModuleConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *BruteModuleConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BruteModuleConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.CustomSubNames) > 0 {
		for _, s := range m.CustomSubNames {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.MaxDepth != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.MaxDepth))
	}
	return i, nil
}

func (m *PortModuleConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortModuleConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Ports) > 0 {
		dAtA2 := make([]byte, len(m.Ports)*10)
		var j1 int
		for _, num1 := range m.Ports {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *WebModuleConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebModuleConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.TakeScreenShots {
		dAtA[i] = 0x10
		i++
		if m.TakeScreenShots {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MaxLinks != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.MaxLinks))
	}
	if m.ExtractJS {
		dAtA[i] = 0x20
		i++
		if m.ExtractJS {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FingerprintFrameworks {
		dAtA[i] = 0x28
		i++
		if m.FingerprintFrameworks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ModuleConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleConfiguration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NSConfig != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.NSConfig.Size()))
		n3, err := m.NSConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.BruteConfig != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.BruteConfig.Size()))
		n4, err := m.BruteConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.PortConfig != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.PortConfig.Size()))
		n5, err := m.PortConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.WebModuleConfig != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.WebModuleConfig.Size()))
		n6, err := m.WebModuleConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.DailyScanSchedules) > 0 {
		dAtA8 := make([]byte, len(m.DailyScanSchedules)*10)
		var j7 int
		for _, num1 := range m.DailyScanSchedules {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	return i, nil
}

func (m *Group) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Group) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.GroupID))
	}
	if len(m.GroupName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(len(m.GroupName)))
		i += copy(dAtA[i:], m.GroupName)
	}
	if m.CreationTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.CreationTime))
	}
	if m.CreatedBy != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.CreatedBy))
	}
	if len(m.OriginalInput) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(len(m.OriginalInput)))
		i += copy(dAtA[i:], m.OriginalInput)
	}
	if m.ModuleConfiguration != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.ModuleConfiguration.Size()))
		n9, err := m.ModuleConfiguration.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Deleted {
		dAtA[i] = 0x40
		i++
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *NewGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.UserContext.Size()))
		n10, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Group != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.Group.Size()))
		n11, err := m.Group.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *GroupCreatedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupCreatedResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.GroupID))
	}
	return i, nil
}

func (m *UpdateGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.UserContext.Size()))
		n12, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.Group != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.Group.Size()))
		n13, err := m.Group.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.GroupID))
	}
	if len(m.GroupName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(len(m.GroupName)))
		i += copy(dAtA[i:], m.GroupName)
	}
	return i, nil
}

func (m *GroupUpdatedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupUpdatedResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.GroupID))
	}
	return i, nil
}

func (m *DeleteGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.UserContext.Size()))
		n14, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.GroupID))
	}
	return i, nil
}

func (m *GroupDeletedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupDeletedResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.GroupID))
	}
	return i, nil
}

func (m *GroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.UserContext.Size()))
		n15, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.GroupID))
	}
	if len(m.GroupName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(len(m.GroupName)))
		i += copy(dAtA[i:], m.GroupName)
	}
	return i, nil
}

func (m *GroupsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.UserContext.Size()))
		n16, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *GroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.OrgID))
	}
	if m.Group != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.Group.Size()))
		n17, err := m.Group.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func (m *Address) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Address) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.OrgID))
	}
	if m.AddressID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.AddressID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.GroupID))
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.Settings != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.Settings.Size()))
		n18, err := m.Settings.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.AddedTime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.AddedTime))
	}
	if len(m.AddedBy) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(len(m.AddedBy)))
		i += copy(dAtA[i:], m.AddedBy)
	}
	if m.Ignored {
		dAtA[i] = 0x40
		i++
		if m.Ignored {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *AddressesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.UserContext.Size()))
		n19, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.GroupID))
	}
	if m.Ignore {
		dAtA[i] = 0x20
		i++
		if m.Ignore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *AddressesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.OrgID))
	}
	if m.Addresses != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.Addresses.Size()))
		n20, err := m.Addresses.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *AddAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.UserContext.Size()))
		n21, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.GroupID))
	}
	if m.AddedTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.AddedTime))
	}
	if len(m.AddedBy) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(len(m.AddedBy)))
		i += copy(dAtA[i:], m.AddedBy)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.Settings != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.Settings.Size()))
		n22, err := m.Settings.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.Ignored {
		dAtA[i] = 0x38
		i++
		if m.Ignored {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *FailedAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FailedAddress) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FailedAddress) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(len(m.FailedAddress)))
		i += copy(dAtA[i:], m.FailedAddress)
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	return i, nil
}

func (m *AddAddressesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddAddressesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.OrgID))
	}
	if m.CountAdded != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.CountAdded))
	}
	if len(m.FailedAddresses) > 0 {
		for _, msg := range m.FailedAddresses {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintScangroupservicer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.GroupID))
	}
	if m.AddressID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.AddressID))
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.Settings != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.Settings.Size()))
		n23, err := m.Settings.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.Ignored {
		dAtA[i] = 0x30
		i++
		if m.Ignored {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UpdateAddressesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAddressesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.OrgID))
	}
	if m.CountUpdated != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintScangroupservicer(dAtA, i, uint64(m.CountUpdated))
	}
	if len(m.FailedAddresses) > 0 {
		for _, msg := range m.FailedAddresses {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintScangroupservicer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintScangroupservicer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NSModuleConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovScangroupservicer(uint64(l))
	}
	return n
}

func (m *BruteModuleConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovScangroupservicer(uint64(l))
	}
	if len(m.CustomSubNames) > 0 {
		for _, s := range m.CustomSubNames {
			l = len(s)
			n += 1 + l + sovScangroupservicer(uint64(l))
		}
	}
	if m.MaxDepth != 0 {
		n += 1 + sovScangroupservicer(uint64(m.MaxDepth))
	}
	return n
}

func (m *PortModuleConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovScangroupservicer(uint64(l))
	}
	if len(m.Ports) > 0 {
		l = 0
		for _, e := range m.Ports {
			l += sovScangroupservicer(uint64(e))
		}
		n += 1 + sovScangroupservicer(uint64(l)) + l
	}
	return n
}

func (m *WebModuleConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovScangroupservicer(uint64(l))
	}
	if m.TakeScreenShots {
		n += 2
	}
	if m.MaxLinks != 0 {
		n += 1 + sovScangroupservicer(uint64(m.MaxLinks))
	}
	if m.ExtractJS {
		n += 2
	}
	if m.FingerprintFrameworks {
		n += 2
	}
	return n
}

func (m *ModuleConfiguration) Size() (n int) {
	var l int
	_ = l
	if m.NSConfig != nil {
		l = m.NSConfig.Size()
		n += 1 + l + sovScangroupservicer(uint64(l))
	}
	if m.BruteConfig != nil {
		l = m.BruteConfig.Size()
		n += 1 + l + sovScangroupservicer(uint64(l))
	}
	if m.PortConfig != nil {
		l = m.PortConfig.Size()
		n += 1 + l + sovScangroupservicer(uint64(l))
	}
	if m.WebModuleConfig != nil {
		l = m.WebModuleConfig.Size()
		n += 1 + l + sovScangroupservicer(uint64(l))
	}
	if len(m.DailyScanSchedules) > 0 {
		l = 0
		for _, e := range m.DailyScanSchedules {
			l += sovScangroupservicer(uint64(e))
		}
		n += 1 + sovScangroupservicer(uint64(l)) + l
	}
	return n
}

func (m *Group) Size() (n int) {
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovScangroupservicer(uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		n += 1 + sovScangroupservicer(uint64(m.GroupID))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovScangroupservicer(uint64(l))
	}
	if m.CreationTime != 0 {
		n += 1 + sovScangroupservicer(uint64(m.CreationTime))
	}
	if m.CreatedBy != 0 {
		n += 1 + sovScangroupservicer(uint64(m.CreatedBy))
	}
	l = len(m.OriginalInput)
	if l > 0 {
		n += 1 + l + sovScangroupservicer(uint64(l))
	}
	if m.ModuleConfiguration != nil {
		l = m.ModuleConfiguration.Size()
		n += 1 + l + sovScangroupservicer(uint64(l))
	}
	if m.Deleted {
		n += 2
	}
	return n
}

func (m *NewGroupRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovScangroupservicer(uint64(l))
	}
	if m.Group != nil {
		l = m.Group.Size()
		n += 1 + l + sovScangroupservicer(uint64(l))
	}
	return n
}

func (m *GroupCreatedResponse) Size() (n int) {
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovScangroupservicer(uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		n += 1 + sovScangroupservicer(uint64(m.GroupID))
	}
	return n
}

func (m *UpdateGroupRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovScangroupservicer(uint64(l))
	}
	if m.Group != nil {
		l = m.Group.Size()
		n += 1 + l + sovScangroupservicer(uint64(l))
	}
	if m.GroupID != 0 {
		n += 1 + sovScangroupservicer(uint64(m.GroupID))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovScangroupservicer(uint64(l))
	}
	return n
}

func (m *GroupUpdatedResponse) Size() (n int) {
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovScangroupservicer(uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		n += 1 + sovScangroupservicer(uint64(m.GroupID))
	}
	return n
}

func (m *DeleteGroupRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovScangroupservicer(uint64(l))
	}
	if m.GroupID != 0 {
		n += 1 + sovScangroupservicer(uint64(m.GroupID))
	}
	return n
}

func (m *GroupDeletedResponse) Size() (n int) {
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovScangroupservicer(uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		n += 1 + sovScangroupservicer(uint64(m.GroupID))
	}
	return n
}

func (m *GroupRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovScangroupservicer(uint64(l))
	}
	if m.GroupID != 0 {
		n += 1 + sovScangroupservicer(uint64(m.GroupID))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovScangroupservicer(uint64(l))
	}
	return n
}

func (m *GroupsRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovScangroupservicer(uint64(l))
	}
	return n
}

func (m *GroupResponse) Size() (n int) {
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovScangroupservicer(uint64(m.OrgID))
	}
	if m.Group != nil {
		l = m.Group.Size()
		n += 1 + l + sovScangroupservicer(uint64(l))
	}
	return n
}

func (m *Address) Size() (n int) {
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovScangroupservicer(uint64(m.OrgID))
	}
	if m.AddressID != 0 {
		n += 1 + sovScangroupservicer(uint64(m.AddressID))
	}
	if m.GroupID != 0 {
		n += 1 + sovScangroupservicer(uint64(m.GroupID))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovScangroupservicer(uint64(l))
	}
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovScangroupservicer(uint64(l))
	}
	if m.AddedTime != 0 {
		n += 1 + sovScangroupservicer(uint64(m.AddedTime))
	}
	l = len(m.AddedBy)
	if l > 0 {
		n += 1 + l + sovScangroupservicer(uint64(l))
	}
	if m.Ignored {
		n += 2
	}
	return n
}

func (m *AddressesRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovScangroupservicer(uint64(l))
	}
	if m.GroupID != 0 {
		n += 1 + sovScangroupservicer(uint64(m.GroupID))
	}
	if m.Ignore {
		n += 2
	}
	return n
}

func (m *AddressesResponse) Size() (n int) {
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovScangroupservicer(uint64(m.OrgID))
	}
	if m.Addresses != nil {
		l = m.Addresses.Size()
		n += 1 + l + sovScangroupservicer(uint64(l))
	}
	return n
}

func (m *AddAddressRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovScangroupservicer(uint64(l))
	}
	if m.GroupID != 0 {
		n += 1 + sovScangroupservicer(uint64(m.GroupID))
	}
	if m.AddedTime != 0 {
		n += 1 + sovScangroupservicer(uint64(m.AddedTime))
	}
	l = len(m.AddedBy)
	if l > 0 {
		n += 1 + l + sovScangroupservicer(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovScangroupservicer(uint64(l))
	}
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovScangroupservicer(uint64(l))
	}
	if m.Ignored {
		n += 2
	}
	return n
}

func (m *FailedAddress) Size() (n int) {
	var l int
	_ = l
	l = len(m.FailedAddress)
	if l > 0 {
		n += 1 + l + sovScangroupservicer(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovScangroupservicer(uint64(l))
	}
	return n
}

func (m *AddAddressesResponse) Size() (n int) {
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovScangroupservicer(uint64(m.OrgID))
	}
	if m.CountAdded != 0 {
		n += 1 + sovScangroupservicer(uint64(m.CountAdded))
	}
	if len(m.FailedAddresses) > 0 {
		for _, e := range m.FailedAddresses {
			l = e.Size()
			n += 1 + l + sovScangroupservicer(uint64(l))
		}
	}
	return n
}

func (m *UpdateAddressRequest) Size() (n int) {
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovScangroupservicer(uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		n += 1 + sovScangroupservicer(uint64(m.GroupID))
	}
	if m.AddressID != 0 {
		n += 1 + sovScangroupservicer(uint64(m.AddressID))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovScangroupservicer(uint64(l))
	}
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovScangroupservicer(uint64(l))
	}
	if m.Ignored {
		n += 2
	}
	return n
}

func (m *UpdateAddressesResponse) Size() (n int) {
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovScangroupservicer(uint64(m.OrgID))
	}
	if m.CountUpdated != 0 {
		n += 1 + sovScangroupservicer(uint64(m.CountUpdated))
	}
	if len(m.FailedAddresses) > 0 {
		for _, e := range m.FailedAddresses {
			l = e.Size()
			n += 1 + l + sovScangroupservicer(uint64(l))
		}
	}
	return n
}

func sovScangroupservicer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozScangroupservicer(x uint64) (n int) {
	return sovScangroupservicer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NSModuleConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScangroupservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NSModuleConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NSModuleConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScangroupservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BruteModuleConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScangroupservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BruteModuleConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BruteModuleConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomSubNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomSubNames = append(m.CustomSubNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDepth", wireType)
			}
			m.MaxDepth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDepth |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScangroupservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortModuleConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScangroupservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortModuleConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortModuleConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScangroupservicer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ports = append(m.Ports, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScangroupservicer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthScangroupservicer
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScangroupservicer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ports = append(m.Ports, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScangroupservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebModuleConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScangroupservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebModuleConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebModuleConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakeScreenShots", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TakeScreenShots = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLinks", wireType)
			}
			m.MaxLinks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLinks |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtractJS", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExtractJS = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FingerprintFrameworks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FingerprintFrameworks = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipScangroupservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScangroupservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NSConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NSConfig == nil {
				m.NSConfig = &NSModuleConfig{}
			}
			if err := m.NSConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BruteConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BruteConfig == nil {
				m.BruteConfig = &BruteModuleConfig{}
			}
			if err := m.BruteConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PortConfig == nil {
				m.PortConfig = &PortModuleConfig{}
			}
			if err := m.PortConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebModuleConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WebModuleConfig == nil {
				m.WebModuleConfig = &WebModuleConfig{}
			}
			if err := m.WebModuleConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScangroupservicer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DailyScanSchedules = append(m.DailyScanSchedules, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScangroupservicer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthScangroupservicer
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScangroupservicer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DailyScanSchedules = append(m.DailyScanSchedules, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyScanSchedules", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScangroupservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Group) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScangroupservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Group: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Group: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
			}
			m.CreationTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			m.CreatedBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedBy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalInput", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalInput = append(m.OriginalInput[:0], dAtA[iNdEx:postIndex]...)
			if m.OriginalInput == nil {
				m.OriginalInput = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModuleConfiguration == nil {
				m.ModuleConfiguration = &ModuleConfiguration{}
			}
			if err := m.ModuleConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipScangroupservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScangroupservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &user.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Group == nil {
				m.Group = &Group{}
			}
			if err := m.Group.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScangroupservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupCreatedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScangroupservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupCreatedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupCreatedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScangroupservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScangroupservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &user.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Group == nil {
				m.Group = &Group{}
			}
			if err := m.Group.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScangroupservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupUpdatedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScangroupservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupUpdatedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupUpdatedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScangroupservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScangroupservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &user.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScangroupservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupDeletedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScangroupservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupDeletedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupDeletedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScangroupservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScangroupservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &user.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScangroupservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScangroupservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &user.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScangroupservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScangroupservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Group == nil {
				m.Group = &Group{}
			}
			if err := m.Group.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScangroupservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Address) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScangroupservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Address: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Address: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressID", wireType)
			}
			m.AddressID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddressID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &ModuleConfiguration{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedTime", wireType)
			}
			m.AddedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddedTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ignored", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ignored = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipScangroupservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScangroupservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &user.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ignore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ignore = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipScangroupservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScangroupservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Addresses == nil {
				m.Addresses = &Address{}
			}
			if err := m.Addresses.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScangroupservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScangroupservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &user.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedTime", wireType)
			}
			m.AddedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddedTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &ModuleConfiguration{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ignored", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ignored = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipScangroupservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FailedAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScangroupservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FailedAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FailedAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailedAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScangroupservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddAddressesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScangroupservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddAddressesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddAddressesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountAdded", wireType)
			}
			m.CountAdded = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountAdded |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailedAddresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailedAddresses = append(m.FailedAddresses, &FailedAddress{})
			if err := m.FailedAddresses[len(m.FailedAddresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScangroupservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScangroupservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressID", wireType)
			}
			m.AddressID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddressID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &ModuleConfiguration{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ignored", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ignored = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipScangroupservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAddressesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScangroupservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAddressesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAddressesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountUpdated", wireType)
			}
			m.CountUpdated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountUpdated |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailedAddresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailedAddresses = append(m.FailedAddresses, &FailedAddress{})
			if err := m.FailedAddresses[len(m.FailedAddresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScangroupservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScangroupservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipScangroupservicer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowScangroupservicer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScangroupservicer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthScangroupservicer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowScangroupservicer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipScangroupservicer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthScangroupservicer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowScangroupservicer   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("scangroup/scangroupservicer.proto", fileDescriptorScangroupservicer) }

var fileDescriptorScangroupservicer = []byte{
	// 1129 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0x51, 0x73, 0xdb, 0x44,
	0x10, 0x46, 0x51, 0x24, 0xc7, 0x1b, 0xb7, 0x49, 0x8f, 0xb4, 0x15, 0x6e, 0x70, 0x83, 0xa6, 0xd3,
	0xf1, 0x93, 0x5d, 0x42, 0x99, 0x61, 0x80, 0x09, 0x83, 0xed, 0x3a, 0x09, 0x43, 0x92, 0xce, 0xb9,
	0x1d, 0x06, 0x98, 0x61, 0x46, 0xb1, 0x0f, 0x47, 0x63, 0x5b, 0x12, 0x77, 0xa7, 0x34, 0xf9, 0x01,
	0xbc, 0xf3, 0x04, 0xfc, 0x00, 0x5e, 0xf8, 0x15, 0x7d, 0xe5, 0x91, 0x07, 0x7e, 0x00, 0x13, 0x7e,
	0x08, 0x8c, 0x4e, 0x67, 0xe9, 0x24, 0x39, 0x31, 0x35, 0x0d, 0x6f, 0xba, 0xbd, 0xdd, 0xbd, 0xdd,
	0xef, 0xdb, 0xdb, 0x5b, 0xc1, 0x3b, 0xac, 0xef, 0x78, 0x43, 0xea, 0x87, 0x41, 0x33, 0xf9, 0x62,
	0x84, 0x9e, 0xba, 0x7d, 0x42, 0x1b, 0x01, 0xf5, 0xb9, 0x8f, 0xca, 0xc9, 0x46, 0xf5, 0xb6, 0x90,
	0xf0, 0xf3, 0x80, 0xb0, 0x66, 0xc8, 0xa6, 0x1a, 0xf6, 0x03, 0xb8, 0x79, 0xd8, 0x3b, 0xf0, 0x07,
	0xe1, 0x98, 0xb4, 0x7d, 0xef, 0x5b, 0x77, 0x88, 0x10, 0x2c, 0x1f, 0x3a, 0x13, 0x62, 0x69, 0x5b,
	0x5a, 0xbd, 0x8c, 0xc5, 0xb7, 0x3d, 0x82, 0x5b, 0x2d, 0x1a, 0x72, 0x32, 0x4f, 0x11, 0x3d, 0x84,
	0x9b, 0xed, 0x90, 0x71, 0x7f, 0xd2, 0x0b, 0x8f, 0x23, 0x01, 0xb3, 0x96, 0xb6, 0xf4, 0x7a, 0x19,
	0xe7, 0xa4, 0xa8, 0x0a, 0x2b, 0x07, 0xce, 0x59, 0x87, 0x04, 0xfc, 0xc4, 0xd2, 0xb7, 0xb4, 0xba,
	0x81, 0x93, 0xb5, 0xfd, 0x31, 0xac, 0x3f, 0xf5, 0x29, 0x9f, 0x7b, 0xd6, 0x06, 0x18, 0x91, 0x5e,
	0x7c, 0x84, 0x81, 0xe3, 0x85, 0xfd, 0x52, 0x83, 0xb5, 0x2f, 0xc8, 0xf1, 0x5c, 0xeb, 0x3a, 0xac,
	0x3d, 0x73, 0x46, 0xa4, 0xd7, 0xa7, 0x84, 0x78, 0xbd, 0x13, 0x5f, 0xf8, 0xd1, 0xea, 0x2b, 0x38,
	0x2f, 0x96, 0xb1, 0x7e, 0xee, 0x7a, 0x23, 0xa6, 0xc4, 0x2a, 0xd6, 0x68, 0x13, 0xca, 0x4f, 0xce,
	0x38, 0x75, 0xfa, 0xfc, 0xb3, 0x9e, 0xb5, 0x2c, 0xec, 0x53, 0x01, 0x7a, 0x0c, 0xb7, 0xbb, 0xae,
	0x37, 0x24, 0x34, 0xa0, 0xae, 0xc7, 0xbb, 0xd4, 0x99, 0x90, 0x17, 0x3e, 0x1d, 0x31, 0xcb, 0x10,
	0x9a, 0xb3, 0x37, 0xed, 0x97, 0x4b, 0xf0, 0xa6, 0x1a, 0x7e, 0x48, 0x1d, 0xee, 0xfa, 0x1e, 0x7a,
	0x1f, 0x56, 0x0e, 0x7b, 0xb1, 0x48, 0x64, 0xb2, 0xba, 0xfd, 0x56, 0x23, 0xe1, 0xb7, 0x91, 0x65,
	0x11, 0x27, 0xaa, 0x68, 0x07, 0x56, 0x05, 0x77, 0xd2, 0x72, 0x49, 0x58, 0x6e, 0x2a, 0x96, 0x05,
	0x66, 0xb1, 0x6a, 0x80, 0x3e, 0x02, 0x88, 0x90, 0x95, 0xe6, 0xba, 0x30, 0xbf, 0xa7, 0x98, 0xe7,
	0xb9, 0xc2, 0x8a, 0x3a, 0xea, 0x14, 0xc8, 0x10, 0x28, 0xad, 0x6e, 0x57, 0x15, 0x0f, 0x39, 0x0d,
	0x5c, 0xe0, 0xaf, 0x01, 0xa8, 0xe3, 0xb8, 0xe3, 0xf3, 0x5e, 0xdf, 0xf1, 0x7a, 0xfd, 0x13, 0x12,
	0x6d, 0x45, 0x20, 0xea, 0x75, 0x1d, 0xcf, 0xd8, 0xb1, 0x7f, 0x5d, 0x02, 0x63, 0x37, 0x72, 0x1d,
	0xd5, 0xc8, 0x11, 0x1d, 0xee, 0x77, 0x04, 0x60, 0x06, 0x8e, 0x17, 0xc8, 0x82, 0x92, 0xd8, 0xde,
	0xef, 0x08, 0x38, 0x0c, 0x3c, 0x5d, 0x46, 0x7c, 0x8a, 0x4f, 0x51, 0x2e, 0xba, 0x28, 0x97, 0x54,
	0x80, 0x6c, 0xa8, 0xb4, 0x29, 0x11, 0x6c, 0x3c, 0x73, 0x27, 0x44, 0xa4, 0xa2, 0xe3, 0x8c, 0x2c,
	0xf2, 0x20, 0xd6, 0x64, 0xd0, 0x3a, 0x17, 0x3c, 0x1b, 0x38, 0x15, 0xa0, 0x07, 0x70, 0xe3, 0x88,
	0xba, 0x43, 0xd7, 0x73, 0xc6, 0xfb, 0x5e, 0x10, 0x72, 0xcb, 0xdc, 0xd2, 0xea, 0x15, 0x9c, 0x15,
	0xa2, 0xa7, 0x33, 0x0b, 0xc0, 0x2a, 0x09, 0xe4, 0x6a, 0x0a, 0x72, 0x33, 0xb4, 0xf0, 0xcc, 0xda,
	0xb1, 0xa0, 0xd4, 0x21, 0x63, 0xc2, 0xc9, 0xc0, 0x5a, 0x11, 0xb5, 0x37, 0x5d, 0xda, 0x2e, 0xac,
	0x1d, 0x92, 0x17, 0x22, 0x47, 0x4c, 0xbe, 0x0b, 0x09, 0xe3, 0xa8, 0x01, 0xab, 0xcf, 0x19, 0xa1,
	0x6d, 0xdf, 0xe3, 0xe4, 0x8c, 0xcb, 0x5a, 0xab, 0x34, 0x14, 0x19, 0x56, 0x15, 0xd0, 0x43, 0x89,
	0xb6, 0xac, 0xad, 0x75, 0x25, 0xc0, 0xd8, 0x6f, 0xbc, 0x6d, 0x77, 0x61, 0x43, 0x7c, 0x48, 0x38,
	0x30, 0x61, 0x81, 0xef, 0x31, 0xf2, 0xaa, 0x24, 0xd9, 0xbf, 0x68, 0x80, 0x9e, 0x07, 0x03, 0x87,
	0x93, 0xff, 0x23, 0x6c, 0x35, 0x10, 0xfd, 0x8a, 0x6a, 0x59, 0xce, 0x55, 0x4b, 0x92, 0x6e, 0x1c,
	0xea, 0xe2, 0xe9, 0x7e, 0x03, 0x28, 0x26, 0xeb, 0x3f, 0x65, 0x7b, 0xb9, 0xff, 0x69, 0x9c, 0xb2,
	0x22, 0x16, 0x8e, 0xf3, 0x14, 0x2a, 0xd7, 0x13, 0xe1, 0x1c, 0x9c, 0x3f, 0x81, 0x1b, 0x62, 0xc1,
	0x16, 0x3c, 0xd8, 0x3e, 0x90, 0x0e, 0xe6, 0x64, 0xfe, 0x6f, 0xcb, 0xfc, 0x6f, 0x0d, 0x4a, 0x9f,
	0x0e, 0x06, 0x94, 0x30, 0x76, 0x89, 0xa7, 0x4d, 0x28, 0x4b, 0x05, 0x99, 0xab, 0x8e, 0x53, 0xc1,
	0x15, 0xf5, 0x66, 0x25, 0x8e, 0x25, 0x0a, 0xc9, 0x39, 0x1f, 0xc2, 0x4a, 0x8f, 0x70, 0xee, 0x7a,
	0xc3, 0xf8, 0x71, 0x99, 0xdf, 0x26, 0x12, 0x7d, 0x19, 0x0d, 0x19, 0x88, 0x96, 0x66, 0x26, 0xd1,
	0xc4, 0x02, 0x79, 0xa6, 0xe8, 0x66, 0xa5, 0xe4, 0x4c, 0xd1, 0xcb, 0x2c, 0x28, 0xed, 0x0f, 0x3d,
	0x9f, 0xa6, 0x3d, 0x45, 0x2e, 0x6d, 0x0e, 0xeb, 0x32, 0x30, 0xc2, 0x5e, 0x7f, 0x35, 0xdc, 0x01,
	0x33, 0x3e, 0x48, 0x3e, 0xb8, 0x72, 0x65, 0x7f, 0x0d, 0xb7, 0x94, 0x53, 0xaf, 0xa4, 0xf2, 0x51,
	0x42, 0x00, 0x61, 0x92, 0x4e, 0xa4, 0xe0, 0x25, 0xf7, 0x70, 0xaa, 0x64, 0x7f, 0xbf, 0x24, 0xbc,
	0x4f, 0x77, 0xae, 0xa3, 0xc4, 0x53, 0x12, 0xf4, 0x2b, 0x48, 0x58, 0x2e, 0x90, 0x30, 0x2d, 0x09,
	0xe3, 0xf2, 0x92, 0x30, 0x5f, 0xb1, 0x24, 0x14, 0x6a, 0x4b, 0x59, 0x6a, 0x0f, 0xe0, 0x46, 0xd7,
	0x71, 0xc7, 0x64, 0x8a, 0x44, 0xf4, 0xa2, 0x65, 0x04, 0x72, 0xc8, 0xca, 0x69, 0xdd, 0x01, 0x13,
	0x13, 0x87, 0xf9, 0x9e, 0xc8, 0xbb, 0x8c, 0xe5, 0xca, 0xfe, 0x41, 0x83, 0x8d, 0x14, 0xd6, 0xb9,
	0xbc, 0xd5, 0x00, 0xda, 0x7e, 0xe8, 0x71, 0x91, 0xbd, 0x84, 0x50, 0x91, 0xa0, 0x16, 0xac, 0x65,
	0xce, 0x25, 0xd1, 0xc4, 0xa6, 0xd7, 0x57, 0xb7, 0x2d, 0x25, 0xf5, 0x8c, 0x06, 0xce, 0x1b, 0xd8,
	0x7f, 0x68, 0xb0, 0x11, 0xb7, 0xec, 0x1c, 0xd9, 0x0b, 0xcc, 0x12, 0xe9, 0x2d, 0x8f, 0x6f, 0x72,
	0xf6, 0x96, 0x5f, 0xc3, 0x5d, 0x56, 0x88, 0x33, 0xb3, 0xc4, 0xfd, 0xa4, 0xc1, 0xdd, 0x4c, 0x5a,
	0x73, 0xc1, 0x8e, 0xa6, 0x9d, 0x08, 0x5a, 0xf9, 0x7e, 0xc9, 0xf4, 0x32, 0xb2, 0xd7, 0x01, 0xf8,
	0xf6, 0x8f, 0x06, 0x94, 0xa3, 0xf9, 0x2d, 0x7e, 0x6d, 0x3f, 0x00, 0x7d, 0x97, 0x70, 0x74, 0xb7,
	0xd0, 0x5d, 0x63, 0x16, 0xaa, 0x56, 0x71, 0x43, 0x66, 0xb1, 0x03, 0xe5, 0x5d, 0xc2, 0x5b, 0xe7,
	0x62, 0x54, 0x5b, 0xc0, 0xfe, 0x09, 0x98, 0xf1, 0x64, 0x82, 0xd4, 0xe1, 0x34, 0x37, 0x1c, 0x55,
	0xef, 0xe7, 0xed, 0xf3, 0xd3, 0xcc, 0x1e, 0x98, 0x31, 0x3a, 0xe8, 0x6d, 0x45, 0xb5, 0x38, 0xaf,
	0x14, 0x3d, 0xe5, 0x07, 0x85, 0x3d, 0x30, 0xe3, 0x37, 0x39, 0xe3, 0xa9, 0x38, 0x0b, 0x14, 0x3d,
	0xe5, 0x9f, 0xf2, 0x1d, 0x30, 0xe3, 0x27, 0x12, 0x15, 0xd2, 0x67, 0x73, 0x81, 0x79, 0xa4, 0xa1,
	0x3d, 0xa5, 0x5f, 0xa2, 0x7b, 0xc5, 0x4e, 0x99, 0xb4, 0xf9, 0xea, 0xe6, 0xec, 0xcd, 0xc4, 0xd3,
	0x11, 0x54, 0xd4, 0xfb, 0x8e, 0x72, 0xfa, 0xd9, 0x2b, 0x97, 0x49, 0x6c, 0x56, 0x9b, 0xa8, 0x6b,
	0xe8, 0x4b, 0x58, 0x97, 0xb8, 0xa5, 0x4e, 0xef, 0x17, 0x80, 0xcf, 0xf9, 0xb5, 0x2f, 0x53, 0x50,
	0x5d, 0xb7, 0xba, 0xbf, 0x5d, 0xd4, 0xb4, 0xdf, 0x2f, 0x6a, 0xda, 0x9f, 0x17, 0x35, 0xed, 0xe7,
	0xbf, 0x6a, 0x6f, 0x7c, 0xf5, 0x78, 0xe8, 0x07, 0xa3, 0x61, 0x63, 0xec, 0x7a, 0x23, 0xc7, 0x6d,
	0xb8, 0x7e, 0xf3, 0xf4, 0xdd, 0x26, 0x25, 0x81, 0xcf, 0x9a, 0xce, 0xa4, 0x29, 0x7e, 0xa8, 0xfb,
	0xf2, 0x0f, 0x9c, 0xa5, 0xff, 0xe4, 0xc7, 0xa6, 0xd8, 0x79, 0xef, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x49, 0xd3, 0x66, 0xc9, 0xb1, 0x0f, 0x00, 0x00,
}
