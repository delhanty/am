// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: coordinator/coordinatorservicer.proto

/*
	Package coordinator is a generated protocol buffer package.

	It is generated from these files:
		coordinator/coordinatorservicer.proto

	It has these top-level messages:
		StartGroupRequest
		GroupStartedResponse
		RegisterRequest
		RegisteredResponse
*/
package coordinator

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import user "github.com/linkai-io/am/protocservices/prototypes"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StartGroupRequest struct {
	UserContext *user.UserContext `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	GroupID     int32             `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
}

func (m *StartGroupRequest) Reset()         { *m = StartGroupRequest{} }
func (m *StartGroupRequest) String() string { return proto.CompactTextString(m) }
func (*StartGroupRequest) ProtoMessage()    {}
func (*StartGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorCoordinatorservicer, []int{0}
}

func (m *StartGroupRequest) GetUserContext() *user.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *StartGroupRequest) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

type GroupStartedResponse struct {
}

func (m *GroupStartedResponse) Reset()         { *m = GroupStartedResponse{} }
func (m *GroupStartedResponse) String() string { return proto.CompactTextString(m) }
func (*GroupStartedResponse) ProtoMessage()    {}
func (*GroupStartedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorCoordinatorservicer, []int{1}
}

type RegisterRequest struct {
	DispatcherID string `protobuf:"bytes,1,opt,name=DispatcherID,proto3" json:"DispatcherID,omitempty"`
}

func (m *RegisterRequest) Reset()         { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()    {}
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorCoordinatorservicer, []int{2}
}

func (m *RegisterRequest) GetDispatcherID() string {
	if m != nil {
		return m.DispatcherID
	}
	return ""
}

type RegisteredResponse struct {
}

func (m *RegisteredResponse) Reset()         { *m = RegisteredResponse{} }
func (m *RegisteredResponse) String() string { return proto.CompactTextString(m) }
func (*RegisteredResponse) ProtoMessage()    {}
func (*RegisteredResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorCoordinatorservicer, []int{3}
}

func init() {
	proto.RegisterType((*StartGroupRequest)(nil), "coordinator.StartGroupRequest")
	proto.RegisterType((*GroupStartedResponse)(nil), "coordinator.GroupStartedResponse")
	proto.RegisterType((*RegisterRequest)(nil), "coordinator.RegisterRequest")
	proto.RegisterType((*RegisteredResponse)(nil), "coordinator.RegisteredResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Coordinator service

type CoordinatorClient interface {
	StartGroup(ctx context.Context, in *StartGroupRequest, opts ...grpc.CallOption) (*GroupStartedResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisteredResponse, error)
}

type coordinatorClient struct {
	cc *grpc.ClientConn
}

func NewCoordinatorClient(cc *grpc.ClientConn) CoordinatorClient {
	return &coordinatorClient{cc}
}

func (c *coordinatorClient) StartGroup(ctx context.Context, in *StartGroupRequest, opts ...grpc.CallOption) (*GroupStartedResponse, error) {
	out := new(GroupStartedResponse)
	err := grpc.Invoke(ctx, "/coordinator.Coordinator/StartGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisteredResponse, error) {
	out := new(RegisteredResponse)
	err := grpc.Invoke(ctx, "/coordinator.Coordinator/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Coordinator service

type CoordinatorServer interface {
	StartGroup(context.Context, *StartGroupRequest) (*GroupStartedResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisteredResponse, error)
}

func RegisterCoordinatorServer(s *grpc.Server, srv CoordinatorServer) {
	s.RegisterService(&_Coordinator_serviceDesc, srv)
}

func _Coordinator_StartGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).StartGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.Coordinator/StartGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).StartGroup(ctx, req.(*StartGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.Coordinator/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Coordinator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "coordinator.Coordinator",
	HandlerType: (*CoordinatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartGroup",
			Handler:    _Coordinator_StartGroup_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Coordinator_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coordinator/coordinatorservicer.proto",
}

func (m *StartGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCoordinatorservicer(dAtA, i, uint64(m.UserContext.Size()))
		n1, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCoordinatorservicer(dAtA, i, uint64(m.GroupID))
	}
	return i, nil
}

func (m *GroupStartedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupStartedResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RegisterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DispatcherID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCoordinatorservicer(dAtA, i, uint64(len(m.DispatcherID)))
		i += copy(dAtA[i:], m.DispatcherID)
	}
	return i, nil
}

func (m *RegisteredResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisteredResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintCoordinatorservicer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *StartGroupRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovCoordinatorservicer(uint64(l))
	}
	if m.GroupID != 0 {
		n += 1 + sovCoordinatorservicer(uint64(m.GroupID))
	}
	return n
}

func (m *GroupStartedResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RegisterRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.DispatcherID)
	if l > 0 {
		n += 1 + l + sovCoordinatorservicer(uint64(l))
	}
	return n
}

func (m *RegisteredResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovCoordinatorservicer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCoordinatorservicer(x uint64) (n int) {
	return sovCoordinatorservicer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StartGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoordinatorservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoordinatorservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoordinatorservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &user.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoordinatorservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCoordinatorservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoordinatorservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupStartedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoordinatorservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupStartedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupStartedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCoordinatorservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoordinatorservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoordinatorservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DispatcherID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoordinatorservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoordinatorservicer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DispatcherID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoordinatorservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoordinatorservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisteredResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoordinatorservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisteredResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisteredResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCoordinatorservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoordinatorservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCoordinatorservicer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCoordinatorservicer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoordinatorservicer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoordinatorservicer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCoordinatorservicer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCoordinatorservicer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCoordinatorservicer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCoordinatorservicer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCoordinatorservicer   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("coordinator/coordinatorservicer.proto", fileDescriptorCoordinatorservicer)
}

var fileDescriptorCoordinatorservicer = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0xdd, 0x4a, 0xc3, 0x30,
	0x18, 0x35, 0x82, 0x7f, 0x5f, 0x07, 0x62, 0x98, 0x52, 0x8a, 0xd4, 0x59, 0x10, 0x76, 0x63, 0x0a,
	0x15, 0x5f, 0xc0, 0x15, 0xa4, 0x57, 0x42, 0xc4, 0x1b, 0xc1, 0x8b, 0xae, 0xfb, 0xd8, 0x82, 0xae,
	0xa9, 0x49, 0x2a, 0xfa, 0x26, 0xbe, 0x82, 0x6f, 0xe2, 0xa5, 0x8f, 0x20, 0xf5, 0x45, 0x84, 0x60,
	0x69, 0xea, 0x76, 0xf7, 0xf5, 0x9c, 0xf3, 0x7d, 0xa7, 0x27, 0x07, 0xce, 0x0a, 0x29, 0xd5, 0x4c,
	0x94, 0xb9, 0x91, 0x2a, 0x76, 0x66, 0x8d, 0xea, 0x45, 0x14, 0xa8, 0x58, 0xa5, 0xa4, 0x91, 0xd4,
	0x73, 0xa8, 0xe0, 0xd0, 0x62, 0xe6, 0xad, 0x42, 0x1d, 0xd7, 0xba, 0xd5, 0x44, 0x0f, 0x70, 0x70,
	0x6b, 0x72, 0x65, 0xae, 0x95, 0xac, 0x2b, 0x8e, 0xcf, 0x35, 0x6a, 0x43, 0x19, 0x78, 0x77, 0x1a,
	0xd5, 0x44, 0x96, 0x06, 0x5f, 0x8d, 0x4f, 0x46, 0x64, 0xec, 0x25, 0x03, 0xe6, 0x60, 0xdc, 0x15,
	0x50, 0x1f, 0x76, 0xec, 0x7e, 0x96, 0xfa, 0x9b, 0x23, 0x32, 0xde, 0xe2, 0xed, 0x67, 0x74, 0x04,
	0x43, 0x3b, 0x5a, 0x0f, 0x9c, 0x71, 0xd4, 0x95, 0x2c, 0x35, 0x46, 0x97, 0xb0, 0xcf, 0x71, 0x2e,
	0xb4, 0x41, 0xd5, 0x9a, 0x46, 0x30, 0x48, 0x85, 0xae, 0x72, 0x53, 0x2c, 0x50, 0x65, 0xa9, 0x75,
	0xdd, 0xe3, 0x3d, 0x2c, 0x1a, 0x02, 0x6d, 0xd7, 0xba, 0x63, 0xc9, 0x07, 0x01, 0x6f, 0xd2, 0x45,
	0xa5, 0x37, 0x00, 0x5d, 0x26, 0x1a, 0x32, 0xe7, 0x19, 0xd8, 0x4a, 0xd8, 0xe0, 0xb4, 0xc7, 0xaf,
	0xfb, 0x5b, 0x9a, 0xc1, 0x6e, 0x6b, 0x4b, 0x8f, 0x7b, 0xf2, 0x7f, 0x21, 0x82, 0x93, 0xb5, 0x6c,
	0x77, 0xea, 0x2a, 0xfd, 0x6c, 0x42, 0xf2, 0xd5, 0x84, 0xe4, 0xbb, 0x09, 0xc9, 0xfb, 0x4f, 0xb8,
	0x71, 0x9f, 0xcc, 0x85, 0x59, 0xd4, 0x53, 0x56, 0xc8, 0x65, 0xfc, 0x24, 0xca, 0xc7, 0x5c, 0x9c,
	0x0b, 0x19, 0xe7, 0xcb, 0xd8, 0x16, 0x54, 0xfc, 0x75, 0xaa, 0xdd, 0x9e, 0xa7, 0xdb, 0x96, 0xbb,
	0xf8, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xc6, 0xd5, 0x32, 0x89, 0x09, 0x02, 0x00, 0x00,
}
