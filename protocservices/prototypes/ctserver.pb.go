// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: prototypes/ctserver.proto

package prototypes // import "github.com/linkai-io/am/protocservices/prototypes"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CTServer struct {
	ID                   int32    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	URL                  string   `protobuf:"bytes,2,opt,name=URL,proto3" json:"URL,omitempty"`
	StartIndex           int64    `protobuf:"varint,3,opt,name=StartIndex,proto3" json:"StartIndex,omitempty"`
	Index                int64    `protobuf:"varint,4,opt,name=Index,proto3" json:"Index,omitempty"`
	IndexUpdated         int64    `protobuf:"varint,5,opt,name=IndexUpdated,proto3" json:"IndexUpdated,omitempty"`
	Step                 int32    `protobuf:"varint,6,opt,name=Step,proto3" json:"Step,omitempty"`
	TreeSize             int64    `protobuf:"varint,7,opt,name=TreeSize,proto3" json:"TreeSize,omitempty"`
	TreeSizeUpdated      int64    `protobuf:"varint,8,opt,name=TreeSizeUpdated,proto3" json:"TreeSizeUpdated,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CTServer) Reset()         { *m = CTServer{} }
func (m *CTServer) String() string { return proto.CompactTextString(m) }
func (*CTServer) ProtoMessage()    {}
func (*CTServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_ctserver_190a400aa4453203, []int{0}
}
func (m *CTServer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CTServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CTServer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CTServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CTServer.Merge(dst, src)
}
func (m *CTServer) XXX_Size() int {
	return m.Size()
}
func (m *CTServer) XXX_DiscardUnknown() {
	xxx_messageInfo_CTServer.DiscardUnknown(m)
}

var xxx_messageInfo_CTServer proto.InternalMessageInfo

func (m *CTServer) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *CTServer) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *CTServer) GetStartIndex() int64 {
	if m != nil {
		return m.StartIndex
	}
	return 0
}

func (m *CTServer) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *CTServer) GetIndexUpdated() int64 {
	if m != nil {
		return m.IndexUpdated
	}
	return 0
}

func (m *CTServer) GetStep() int32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *CTServer) GetTreeSize() int64 {
	if m != nil {
		return m.TreeSize
	}
	return 0
}

func (m *CTServer) GetTreeSizeUpdated() int64 {
	if m != nil {
		return m.TreeSizeUpdated
	}
	return 0
}

func init() {
	proto.RegisterType((*CTServer)(nil), "CTServer")
}
func (m *CTServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CTServer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCtserver(dAtA, i, uint64(m.ID))
	}
	if len(m.URL) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCtserver(dAtA, i, uint64(len(m.URL)))
		i += copy(dAtA[i:], m.URL)
	}
	if m.StartIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCtserver(dAtA, i, uint64(m.StartIndex))
	}
	if m.Index != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCtserver(dAtA, i, uint64(m.Index))
	}
	if m.IndexUpdated != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCtserver(dAtA, i, uint64(m.IndexUpdated))
	}
	if m.Step != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCtserver(dAtA, i, uint64(m.Step))
	}
	if m.TreeSize != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCtserver(dAtA, i, uint64(m.TreeSize))
	}
	if m.TreeSizeUpdated != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintCtserver(dAtA, i, uint64(m.TreeSizeUpdated))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintCtserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CTServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovCtserver(uint64(m.ID))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovCtserver(uint64(l))
	}
	if m.StartIndex != 0 {
		n += 1 + sovCtserver(uint64(m.StartIndex))
	}
	if m.Index != 0 {
		n += 1 + sovCtserver(uint64(m.Index))
	}
	if m.IndexUpdated != 0 {
		n += 1 + sovCtserver(uint64(m.IndexUpdated))
	}
	if m.Step != 0 {
		n += 1 + sovCtserver(uint64(m.Step))
	}
	if m.TreeSize != 0 {
		n += 1 + sovCtserver(uint64(m.TreeSize))
	}
	if m.TreeSizeUpdated != 0 {
		n += 1 + sovCtserver(uint64(m.TreeSizeUpdated))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCtserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCtserver(x uint64) (n int) {
	return sovCtserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CTServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCtserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CTServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CTServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCtserver
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartIndex", wireType)
			}
			m.StartIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartIndex |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexUpdated", wireType)
			}
			m.IndexUpdated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexUpdated |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			m.Step = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Step |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeSize", wireType)
			}
			m.TreeSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreeSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeSizeUpdated", wireType)
			}
			m.TreeSizeUpdated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreeSizeUpdated |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCtserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCtserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCtserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCtserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCtserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCtserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCtserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCtserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCtserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCtserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCtserver   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("prototypes/ctserver.proto", fileDescriptor_ctserver_190a400aa4453203) }

var fileDescriptor_ctserver_190a400aa4453203 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2c, 0x28, 0xca, 0x2f,
	0xc9, 0x2f, 0xa9, 0x2c, 0x48, 0x2d, 0xd6, 0x4f, 0x2e, 0x29, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2,
	0x03, 0x8b, 0x29, 0x3d, 0x60, 0xe4, 0xe2, 0x70, 0x0e, 0x09, 0x06, 0x0b, 0x09, 0xf1, 0x71, 0x31,
	0x79, 0xba, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x06, 0x31, 0x79, 0xba, 0x08, 0x09, 0x70, 0x31,
	0x87, 0x06, 0xf9, 0x48, 0x30, 0x29, 0x30, 0x6a, 0x70, 0x06, 0x81, 0x98, 0x42, 0x72, 0x5c, 0x5c,
	0xc1, 0x25, 0x89, 0x45, 0x25, 0x9e, 0x79, 0x29, 0xa9, 0x15, 0x12, 0xcc, 0x0a, 0x8c, 0x1a, 0xcc,
	0x41, 0x48, 0x22, 0x42, 0x22, 0x5c, 0xac, 0x10, 0x29, 0x16, 0xb0, 0x14, 0x84, 0x23, 0xa4, 0xc4,
	0xc5, 0x03, 0x66, 0x84, 0x16, 0xa4, 0x24, 0x96, 0xa4, 0xa6, 0x48, 0xb0, 0x82, 0x25, 0x51, 0xc4,
	0x84, 0x84, 0xb8, 0x58, 0x82, 0x4b, 0x52, 0x0b, 0x24, 0xd8, 0xc0, 0xb6, 0x83, 0xd9, 0x42, 0x52,
	0x5c, 0x1c, 0x21, 0x45, 0xa9, 0xa9, 0xc1, 0x99, 0x55, 0xa9, 0x12, 0xec, 0x60, 0x3d, 0x70, 0xbe,
	0x90, 0x06, 0x17, 0x3f, 0x8c, 0x0d, 0x33, 0x96, 0x03, 0xac, 0x04, 0x5d, 0xd8, 0xc9, 0xf9, 0xc4,
	0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf1, 0x58, 0x8e, 0x21,
	0xca, 0x30, 0x3d, 0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0x3f, 0x27, 0x33, 0x2f,
	0x3b, 0x31, 0x53, 0x37, 0x33, 0x5f, 0x3f, 0x31, 0x57, 0x1f, 0x1c, 0x26, 0xc9, 0xa0, 0x00, 0xca,
	0x4c, 0x4e, 0x2d, 0xd6, 0x47, 0x04, 0x5b, 0x12, 0x1b, 0x98, 0x6d, 0x0c, 0x08, 0x00, 0x00, 0xff,
	0xff, 0xdf, 0x4f, 0x48, 0xf1, 0x4b, 0x01, 0x00, 0x00,
}
