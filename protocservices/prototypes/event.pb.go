// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: prototypes/event.proto

package prototypes // import "github.com/linkai-io/am/protocservices/prototypes"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventData struct {
	NotificationID       int64    `protobuf:"varint,1,opt,name=NotificationID,proto3" json:"NotificationID,omitempty"`
	OrgID                int32    `protobuf:"varint,2,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	GroupID              int32    `protobuf:"varint,3,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	TypeID               int32    `protobuf:"varint,4,opt,name=TypeID,proto3" json:"TypeID,omitempty"`
	EventTimestamp       int64    `protobuf:"varint,5,opt,name=EventTimestamp,proto3" json:"EventTimestamp,omitempty"`
	Data                 []string `protobuf:"bytes,6,rep,name=Data" json:"Data,omitempty"`
	Read                 bool     `protobuf:"varint,7,opt,name=Read,proto3" json:"Read,omitempty"`
	JsonData             string   `protobuf:"bytes,8,opt,name=JsonData,proto3" json:"JsonData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventData) Reset()         { *m = EventData{} }
func (m *EventData) String() string { return proto.CompactTextString(m) }
func (*EventData) ProtoMessage()    {}
func (*EventData) Descriptor() ([]byte, []int) {
	return fileDescriptor_event_88a2be64f60cc5b5, []int{0}
}
func (m *EventData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EventData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventData.Merge(dst, src)
}
func (m *EventData) XXX_Size() int {
	return m.Size()
}
func (m *EventData) XXX_DiscardUnknown() {
	xxx_messageInfo_EventData.DiscardUnknown(m)
}

var xxx_messageInfo_EventData proto.InternalMessageInfo

func (m *EventData) GetNotificationID() int64 {
	if m != nil {
		return m.NotificationID
	}
	return 0
}

func (m *EventData) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *EventData) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *EventData) GetTypeID() int32 {
	if m != nil {
		return m.TypeID
	}
	return 0
}

func (m *EventData) GetEventTimestamp() int64 {
	if m != nil {
		return m.EventTimestamp
	}
	return 0
}

func (m *EventData) GetData() []string {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *EventData) GetRead() bool {
	if m != nil {
		return m.Read
	}
	return false
}

func (m *EventData) GetJsonData() string {
	if m != nil {
		return m.JsonData
	}
	return ""
}

type EventSubscriptions struct {
	TypeID               int32    `protobuf:"varint,1,opt,name=TypeID,proto3" json:"TypeID,omitempty"`
	SubscribedTimestamp  int64    `protobuf:"varint,2,opt,name=SubscribedTimestamp,proto3" json:"SubscribedTimestamp,omitempty"`
	Subscribed           bool     `protobuf:"varint,3,opt,name=Subscribed,proto3" json:"Subscribed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventSubscriptions) Reset()         { *m = EventSubscriptions{} }
func (m *EventSubscriptions) String() string { return proto.CompactTextString(m) }
func (*EventSubscriptions) ProtoMessage()    {}
func (*EventSubscriptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_event_88a2be64f60cc5b5, []int{1}
}
func (m *EventSubscriptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSubscriptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSubscriptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EventSubscriptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSubscriptions.Merge(dst, src)
}
func (m *EventSubscriptions) XXX_Size() int {
	return m.Size()
}
func (m *EventSubscriptions) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSubscriptions.DiscardUnknown(m)
}

var xxx_messageInfo_EventSubscriptions proto.InternalMessageInfo

func (m *EventSubscriptions) GetTypeID() int32 {
	if m != nil {
		return m.TypeID
	}
	return 0
}

func (m *EventSubscriptions) GetSubscribedTimestamp() int64 {
	if m != nil {
		return m.SubscribedTimestamp
	}
	return 0
}

func (m *EventSubscriptions) GetSubscribed() bool {
	if m != nil {
		return m.Subscribed
	}
	return false
}

type WebhookEvent struct {
	WebhookEventID       int32    `protobuf:"varint,1,opt,name=WebhookEventID,proto3" json:"WebhookEventID,omitempty"`
	OrgID                int32    `protobuf:"varint,2,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	GroupID              int32    `protobuf:"varint,3,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	NotificationID       int64    `protobuf:"varint,4,opt,name=NotificationID,proto3" json:"NotificationID,omitempty"`
	WebhookID            int32    `protobuf:"varint,5,opt,name=WebhookID,proto3" json:"WebhookID,omitempty"`
	TypeID               int32    `protobuf:"varint,6,opt,name=TypeID,proto3" json:"TypeID,omitempty"`
	LastAttemptTimestamp int64    `protobuf:"varint,7,opt,name=LastAttemptTimestamp,proto3" json:"LastAttemptTimestamp,omitempty"`
	LastAttemptStatus    int32    `protobuf:"varint,8,opt,name=LastAttemptStatus,proto3" json:"LastAttemptStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WebhookEvent) Reset()         { *m = WebhookEvent{} }
func (m *WebhookEvent) String() string { return proto.CompactTextString(m) }
func (*WebhookEvent) ProtoMessage()    {}
func (*WebhookEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_event_88a2be64f60cc5b5, []int{2}
}
func (m *WebhookEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebhookEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebhookEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *WebhookEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebhookEvent.Merge(dst, src)
}
func (m *WebhookEvent) XXX_Size() int {
	return m.Size()
}
func (m *WebhookEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_WebhookEvent.DiscardUnknown(m)
}

var xxx_messageInfo_WebhookEvent proto.InternalMessageInfo

func (m *WebhookEvent) GetWebhookEventID() int32 {
	if m != nil {
		return m.WebhookEventID
	}
	return 0
}

func (m *WebhookEvent) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *WebhookEvent) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *WebhookEvent) GetNotificationID() int64 {
	if m != nil {
		return m.NotificationID
	}
	return 0
}

func (m *WebhookEvent) GetWebhookID() int32 {
	if m != nil {
		return m.WebhookID
	}
	return 0
}

func (m *WebhookEvent) GetTypeID() int32 {
	if m != nil {
		return m.TypeID
	}
	return 0
}

func (m *WebhookEvent) GetLastAttemptTimestamp() int64 {
	if m != nil {
		return m.LastAttemptTimestamp
	}
	return 0
}

func (m *WebhookEvent) GetLastAttemptStatus() int32 {
	if m != nil {
		return m.LastAttemptStatus
	}
	return 0
}

type WebhookEventSettings struct {
	WebhookID            int32    `protobuf:"varint,1,opt,name=WebhookID,proto3" json:"WebhookID,omitempty"`
	OrgID                int32    `protobuf:"varint,2,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	GroupID              int32    `protobuf:"varint,3,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	Name                 string   `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	Events               []int32  `protobuf:"varint,5,rep,packed,name=Events" json:"Events,omitempty"`
	Enabled              bool     `protobuf:"varint,6,opt,name=Enabled,proto3" json:"Enabled,omitempty"`
	Version              string   `protobuf:"bytes,7,opt,name=Version,proto3" json:"Version,omitempty"`
	URL                  string   `protobuf:"bytes,8,opt,name=URL,proto3" json:"URL,omitempty"`
	Type                 string   `protobuf:"bytes,9,opt,name=Type,proto3" json:"Type,omitempty"`
	CurrentKey           string   `protobuf:"bytes,10,opt,name=CurrentKey,proto3" json:"CurrentKey,omitempty"`
	PreviousKey          string   `protobuf:"bytes,11,opt,name=PreviousKey,proto3" json:"PreviousKey,omitempty"`
	Deleted              bool     `protobuf:"varint,12,opt,name=Deleted,proto3" json:"Deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WebhookEventSettings) Reset()         { *m = WebhookEventSettings{} }
func (m *WebhookEventSettings) String() string { return proto.CompactTextString(m) }
func (*WebhookEventSettings) ProtoMessage()    {}
func (*WebhookEventSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_event_88a2be64f60cc5b5, []int{3}
}
func (m *WebhookEventSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebhookEventSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebhookEventSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *WebhookEventSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebhookEventSettings.Merge(dst, src)
}
func (m *WebhookEventSettings) XXX_Size() int {
	return m.Size()
}
func (m *WebhookEventSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_WebhookEventSettings.DiscardUnknown(m)
}

var xxx_messageInfo_WebhookEventSettings proto.InternalMessageInfo

func (m *WebhookEventSettings) GetWebhookID() int32 {
	if m != nil {
		return m.WebhookID
	}
	return 0
}

func (m *WebhookEventSettings) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *WebhookEventSettings) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *WebhookEventSettings) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WebhookEventSettings) GetEvents() []int32 {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *WebhookEventSettings) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *WebhookEventSettings) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *WebhookEventSettings) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *WebhookEventSettings) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *WebhookEventSettings) GetCurrentKey() string {
	if m != nil {
		return m.CurrentKey
	}
	return ""
}

func (m *WebhookEventSettings) GetPreviousKey() string {
	if m != nil {
		return m.PreviousKey
	}
	return ""
}

func (m *WebhookEventSettings) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

type UserEventSettings struct {
	WeeklyReportSendDay  int32                 `protobuf:"varint,1,opt,name=WeeklyReportSendDay,proto3" json:"WeeklyReportSendDay,omitempty"`
	ShouldWeeklyEmail    bool                  `protobuf:"varint,2,opt,name=ShouldWeeklyEmail,proto3" json:"ShouldWeeklyEmail,omitempty"`
	DailyReportSendHour  int32                 `protobuf:"varint,3,opt,name=DailyReportSendHour,proto3" json:"DailyReportSendHour,omitempty"`
	ShouldDailyEmail     bool                  `protobuf:"varint,4,opt,name=ShouldDailyEmail,proto3" json:"ShouldDailyEmail,omitempty"`
	UserTimezone         string                `protobuf:"bytes,5,opt,name=UserTimezone,proto3" json:"UserTimezone,omitempty"`
	Subscriptions        []*EventSubscriptions `protobuf:"bytes,6,rep,name=Subscriptions" json:"Subscriptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UserEventSettings) Reset()         { *m = UserEventSettings{} }
func (m *UserEventSettings) String() string { return proto.CompactTextString(m) }
func (*UserEventSettings) ProtoMessage()    {}
func (*UserEventSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_event_88a2be64f60cc5b5, []int{4}
}
func (m *UserEventSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserEventSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserEventSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserEventSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserEventSettings.Merge(dst, src)
}
func (m *UserEventSettings) XXX_Size() int {
	return m.Size()
}
func (m *UserEventSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_UserEventSettings.DiscardUnknown(m)
}

var xxx_messageInfo_UserEventSettings proto.InternalMessageInfo

func (m *UserEventSettings) GetWeeklyReportSendDay() int32 {
	if m != nil {
		return m.WeeklyReportSendDay
	}
	return 0
}

func (m *UserEventSettings) GetShouldWeeklyEmail() bool {
	if m != nil {
		return m.ShouldWeeklyEmail
	}
	return false
}

func (m *UserEventSettings) GetDailyReportSendHour() int32 {
	if m != nil {
		return m.DailyReportSendHour
	}
	return 0
}

func (m *UserEventSettings) GetShouldDailyEmail() bool {
	if m != nil {
		return m.ShouldDailyEmail
	}
	return false
}

func (m *UserEventSettings) GetUserTimezone() string {
	if m != nil {
		return m.UserTimezone
	}
	return ""
}

func (m *UserEventSettings) GetSubscriptions() []*EventSubscriptions {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

type EventFilter struct {
	Start                int64       `protobuf:"varint,1,opt,name=Start,proto3" json:"Start,omitempty"`
	Limit                int32       `protobuf:"varint,2,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Filters              *FilterType `protobuf:"bytes,3,opt,name=Filters" json:"Filters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *EventFilter) Reset()         { *m = EventFilter{} }
func (m *EventFilter) String() string { return proto.CompactTextString(m) }
func (*EventFilter) ProtoMessage()    {}
func (*EventFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_event_88a2be64f60cc5b5, []int{5}
}
func (m *EventFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EventFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventFilter.Merge(dst, src)
}
func (m *EventFilter) XXX_Size() int {
	return m.Size()
}
func (m *EventFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_EventFilter.DiscardUnknown(m)
}

var xxx_messageInfo_EventFilter proto.InternalMessageInfo

func (m *EventFilter) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *EventFilter) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *EventFilter) GetFilters() *FilterType {
	if m != nil {
		return m.Filters
	}
	return nil
}

func init() {
	proto.RegisterType((*EventData)(nil), "EventData")
	proto.RegisterType((*EventSubscriptions)(nil), "EventSubscriptions")
	proto.RegisterType((*WebhookEvent)(nil), "WebhookEvent")
	proto.RegisterType((*WebhookEventSettings)(nil), "WebhookEventSettings")
	proto.RegisterType((*UserEventSettings)(nil), "UserEventSettings")
	proto.RegisterType((*EventFilter)(nil), "EventFilter")
}
func (m *EventData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NotificationID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.NotificationID))
	}
	if m.OrgID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.GroupID))
	}
	if m.TypeID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.TypeID))
	}
	if m.EventTimestamp != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventTimestamp))
	}
	if len(m.Data) > 0 {
		for _, s := range m.Data {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Read {
		dAtA[i] = 0x38
		i++
		if m.Read {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.JsonData) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JsonData)))
		i += copy(dAtA[i:], m.JsonData)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EventSubscriptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSubscriptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TypeID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.TypeID))
	}
	if m.SubscribedTimestamp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.SubscribedTimestamp))
	}
	if m.Subscribed {
		dAtA[i] = 0x18
		i++
		if m.Subscribed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WebhookEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebhookEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WebhookEventID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.WebhookEventID))
	}
	if m.OrgID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.GroupID))
	}
	if m.NotificationID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.NotificationID))
	}
	if m.WebhookID != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.WebhookID))
	}
	if m.TypeID != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.TypeID))
	}
	if m.LastAttemptTimestamp != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.LastAttemptTimestamp))
	}
	if m.LastAttemptStatus != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.LastAttemptStatus))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WebhookEventSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebhookEventSettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WebhookID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.WebhookID))
	}
	if m.OrgID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.GroupID))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Events) > 0 {
		dAtA2 := make([]byte, len(m.Events)*10)
		var j1 int
		for _, num1 := range m.Events {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.Enabled {
		dAtA[i] = 0x30
		i++
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if len(m.URL) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.URL)))
		i += copy(dAtA[i:], m.URL)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.CurrentKey) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CurrentKey)))
		i += copy(dAtA[i:], m.CurrentKey)
	}
	if len(m.PreviousKey) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.PreviousKey)))
		i += copy(dAtA[i:], m.PreviousKey)
	}
	if m.Deleted {
		dAtA[i] = 0x60
		i++
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserEventSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserEventSettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WeeklyReportSendDay != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.WeeklyReportSendDay))
	}
	if m.ShouldWeeklyEmail {
		dAtA[i] = 0x10
		i++
		if m.ShouldWeeklyEmail {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DailyReportSendHour != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.DailyReportSendHour))
	}
	if m.ShouldDailyEmail {
		dAtA[i] = 0x20
		i++
		if m.ShouldDailyEmail {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.UserTimezone) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.UserTimezone)))
		i += copy(dAtA[i:], m.UserTimezone)
	}
	if len(m.Subscriptions) > 0 {
		for _, msg := range m.Subscriptions {
			dAtA[i] = 0x32
			i++
			i = encodeVarintEvent(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EventFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Start != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Start))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Limit))
	}
	if m.Filters != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Filters.Size()))
		n3, err := m.Filters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EventData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotificationID != 0 {
		n += 1 + sovEvent(uint64(m.NotificationID))
	}
	if m.OrgID != 0 {
		n += 1 + sovEvent(uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		n += 1 + sovEvent(uint64(m.GroupID))
	}
	if m.TypeID != 0 {
		n += 1 + sovEvent(uint64(m.TypeID))
	}
	if m.EventTimestamp != 0 {
		n += 1 + sovEvent(uint64(m.EventTimestamp))
	}
	if len(m.Data) > 0 {
		for _, s := range m.Data {
			l = len(s)
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	if m.Read {
		n += 2
	}
	l = len(m.JsonData)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventSubscriptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TypeID != 0 {
		n += 1 + sovEvent(uint64(m.TypeID))
	}
	if m.SubscribedTimestamp != 0 {
		n += 1 + sovEvent(uint64(m.SubscribedTimestamp))
	}
	if m.Subscribed {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WebhookEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WebhookEventID != 0 {
		n += 1 + sovEvent(uint64(m.WebhookEventID))
	}
	if m.OrgID != 0 {
		n += 1 + sovEvent(uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		n += 1 + sovEvent(uint64(m.GroupID))
	}
	if m.NotificationID != 0 {
		n += 1 + sovEvent(uint64(m.NotificationID))
	}
	if m.WebhookID != 0 {
		n += 1 + sovEvent(uint64(m.WebhookID))
	}
	if m.TypeID != 0 {
		n += 1 + sovEvent(uint64(m.TypeID))
	}
	if m.LastAttemptTimestamp != 0 {
		n += 1 + sovEvent(uint64(m.LastAttemptTimestamp))
	}
	if m.LastAttemptStatus != 0 {
		n += 1 + sovEvent(uint64(m.LastAttemptStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WebhookEventSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WebhookID != 0 {
		n += 1 + sovEvent(uint64(m.WebhookID))
	}
	if m.OrgID != 0 {
		n += 1 + sovEvent(uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		n += 1 + sovEvent(uint64(m.GroupID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if len(m.Events) > 0 {
		l = 0
		for _, e := range m.Events {
			l += sovEvent(uint64(e))
		}
		n += 1 + sovEvent(uint64(l)) + l
	}
	if m.Enabled {
		n += 2
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CurrentKey)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.PreviousKey)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Deleted {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserEventSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WeeklyReportSendDay != 0 {
		n += 1 + sovEvent(uint64(m.WeeklyReportSendDay))
	}
	if m.ShouldWeeklyEmail {
		n += 2
	}
	if m.DailyReportSendHour != 0 {
		n += 1 + sovEvent(uint64(m.DailyReportSendHour))
	}
	if m.ShouldDailyEmail {
		n += 2
	}
	l = len(m.UserTimezone)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if len(m.Subscriptions) > 0 {
		for _, e := range m.Subscriptions {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Start != 0 {
		n += 1 + sovEvent(uint64(m.Start))
	}
	if m.Limit != 0 {
		n += 1 + sovEvent(uint64(m.Limit))
	}
	if m.Filters != nil {
		l = m.Filters.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEvent(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationID", wireType)
			}
			m.NotificationID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotificationID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeID", wireType)
			}
			m.TypeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventTimestamp", wireType)
			}
			m.EventTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventTimestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Read", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Read = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsonData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSubscriptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSubscriptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSubscriptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeID", wireType)
			}
			m.TypeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscribedTimestamp", wireType)
			}
			m.SubscribedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubscribedTimestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscribed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Subscribed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebhookEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebhookEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebhookEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebhookEventID", wireType)
			}
			m.WebhookEventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WebhookEventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationID", wireType)
			}
			m.NotificationID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotificationID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebhookID", wireType)
			}
			m.WebhookID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WebhookID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeID", wireType)
			}
			m.TypeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastAttemptTimestamp", wireType)
			}
			m.LastAttemptTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastAttemptTimestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastAttemptStatus", wireType)
			}
			m.LastAttemptStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastAttemptStatus |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebhookEventSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebhookEventSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebhookEventSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebhookID", wireType)
			}
			m.WebhookID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WebhookID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Events = append(m.Events, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvent
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Events) == 0 {
					m.Events = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Events = append(m.Events, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserEventSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserEventSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserEventSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeeklyReportSendDay", wireType)
			}
			m.WeeklyReportSendDay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WeeklyReportSendDay |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShouldWeeklyEmail", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShouldWeeklyEmail = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyReportSendHour", wireType)
			}
			m.DailyReportSendHour = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DailyReportSendHour |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShouldDailyEmail", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShouldDailyEmail = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserTimezone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserTimezone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriptions = append(m.Subscriptions, &EventSubscriptions{})
			if err := m.Subscriptions[len(m.Subscriptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filters == nil {
				m.Filters = &FilterType{}
			}
			if err := m.Filters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEvent(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEvent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("prototypes/event.proto", fileDescriptor_event_88a2be64f60cc5b5) }

var fileDescriptor_event_88a2be64f60cc5b5 = []byte{
	// 690 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0xbe, 0xce, 0xbf, 0x4f, 0x7a, 0xaf, 0xda, 0x69, 0x55, 0x59, 0xbd, 0x57, 0x51, 0x14, 0xe9,
	0xa2, 0x08, 0x41, 0x52, 0xca, 0x8a, 0x25, 0xd4, 0x05, 0x02, 0x55, 0x41, 0x93, 0x96, 0x4a, 0xac,
	0x98, 0x24, 0xa7, 0xed, 0xa8, 0xb1, 0xc7, 0xf2, 0x8c, 0x2b, 0x85, 0x05, 0xcf, 0xc1, 0x13, 0xb0,
	0xe6, 0x29, 0x10, 0x4b, 0x1e, 0x01, 0x95, 0x05, 0xaf, 0x81, 0xe6, 0xd8, 0x69, 0xec, 0x26, 0x9b,
	0xee, 0xce, 0xf7, 0x7d, 0xc7, 0xe7, 0x9c, 0xf9, 0xe6, 0x78, 0x60, 0x3b, 0x8a, 0x95, 0x51, 0x66,
	0x16, 0xa1, 0xee, 0xe3, 0x15, 0x86, 0xa6, 0x47, 0xc4, 0xce, 0xbf, 0x39, 0xfe, 0x4c, 0x4e, 0x0d,
	0xc6, 0x36, 0x4e, 0xc5, 0xce, 0x6f, 0x07, 0xdc, 0x03, 0x9b, 0xec, 0x0b, 0x23, 0xd8, 0x3d, 0xf8,
	0xe7, 0x48, 0x19, 0x79, 0x26, 0xc7, 0xc2, 0x48, 0x15, 0x0e, 0x7c, 0xcf, 0x69, 0x3b, 0xdd, 0x32,
	0xbf, 0xc5, 0xb2, 0x2d, 0xa8, 0xbe, 0x89, 0xcf, 0x07, 0xbe, 0x57, 0x6a, 0x3b, 0xdd, 0x2a, 0x4f,
	0x01, 0xf3, 0xa0, 0xfe, 0x22, 0x56, 0x49, 0x34, 0xf0, 0xbd, 0x32, 0xf1, 0x73, 0xc8, 0xb6, 0xa1,
	0x76, 0x3c, 0x8b, 0x70, 0xe0, 0x7b, 0x15, 0x12, 0x32, 0x64, 0xfb, 0x51, 0xf3, 0x63, 0x19, 0xa0,
	0x36, 0x22, 0x88, 0xbc, 0x6a, 0xda, 0xaf, 0xc8, 0x32, 0x06, 0x15, 0x3b, 0x9f, 0x57, 0x6b, 0x97,
	0xbb, 0x2e, 0xa7, 0xd8, 0x72, 0x1c, 0xc5, 0xc4, 0xab, 0xb7, 0x9d, 0x6e, 0x83, 0x53, 0xcc, 0x76,
	0xa0, 0xf1, 0x4a, 0xab, 0x90, 0x72, 0x1b, 0x6d, 0xa7, 0xeb, 0xf2, 0x1b, 0xdc, 0xf9, 0x04, 0x8c,
	0xaa, 0x0e, 0x93, 0x91, 0x1e, 0xc7, 0x32, 0xb2, 0x47, 0xd1, 0xb9, 0xc9, 0x9c, 0xc2, 0x64, 0xbb,
	0xb0, 0x99, 0x25, 0x8e, 0x70, 0xb2, 0x18, 0xaf, 0x44, 0xe3, 0xad, 0x92, 0x58, 0x0b, 0x60, 0x41,
	0x93, 0x01, 0x0d, 0x9e, 0x63, 0x3a, 0x5f, 0x4a, 0xb0, 0x76, 0x8a, 0xa3, 0x0b, 0xa5, 0x2e, 0x69,
	0x0e, 0x7b, 0xf8, 0x3c, 0xbe, 0x19, 0xe1, 0x16, 0x7b, 0x67, 0xb3, 0x97, 0x2f, 0xb1, 0xb2, 0xf2,
	0x12, 0xff, 0x03, 0x37, 0xeb, 0x34, 0xf0, 0xc9, 0xf7, 0x2a, 0x5f, 0x10, 0x39, 0x63, 0x6a, 0x05,
	0x63, 0xf6, 0x60, 0xeb, 0x50, 0x68, 0xf3, 0xd4, 0x18, 0x0c, 0xa2, 0xdc, 0xc5, 0xd5, 0xa9, 0xc7,
	0x4a, 0x8d, 0x3d, 0x80, 0x8d, 0x1c, 0x3f, 0x34, 0xc2, 0x24, 0x9a, 0xee, 0xa7, 0xca, 0x97, 0x85,
	0xce, 0xb7, 0x12, 0x6c, 0xe5, 0x2d, 0x18, 0xa2, 0x31, 0x32, 0x3c, 0xd7, 0xc5, 0x81, 0x9d, 0xdb,
	0x03, 0xdf, 0xd5, 0x26, 0x06, 0x95, 0x23, 0x11, 0x20, 0x99, 0xe3, 0x72, 0x8a, 0xed, 0xa1, 0xa9,
	0xa5, 0xf6, 0xaa, 0xed, 0xb2, 0x3d, 0x74, 0x8a, 0x6c, 0x95, 0x83, 0x50, 0x8c, 0xa6, 0x38, 0x21,
	0x37, 0x1a, 0x7c, 0x0e, 0xad, 0xf2, 0x0e, 0x63, 0x2d, 0x55, 0x48, 0x0e, 0xb8, 0x7c, 0x0e, 0xd9,
	0x3a, 0x94, 0x4f, 0xf8, 0x61, 0xb6, 0x86, 0x36, 0xb4, 0x1d, 0xad, 0x89, 0x9e, 0x9b, 0x76, 0xb4,
	0xb1, 0xdd, 0x9a, 0xfd, 0x24, 0x8e, 0x31, 0x34, 0xaf, 0x71, 0xe6, 0x01, 0x29, 0x39, 0x86, 0xb5,
	0xa1, 0xf9, 0x36, 0xc6, 0x2b, 0xa9, 0x12, 0x6d, 0x13, 0x9a, 0x94, 0x90, 0xa7, 0xec, 0x04, 0x3e,
	0x4e, 0xd1, 0xe0, 0xc4, 0x5b, 0x4b, 0x67, 0xcb, 0x60, 0xe7, 0x6b, 0x09, 0x36, 0x4e, 0x34, 0xc6,
	0x45, 0x17, 0x77, 0x61, 0xf3, 0x14, 0xf1, 0x72, 0x3a, 0xe3, 0x18, 0xa9, 0xd8, 0x0c, 0x31, 0x9c,
	0xf8, 0x62, 0x96, 0xf9, 0xb9, 0x4a, 0xb2, 0xd7, 0x37, 0xbc, 0x50, 0xc9, 0x74, 0x92, 0x8a, 0x07,
	0x81, 0x90, 0x53, 0x72, 0xb9, 0xc1, 0x97, 0x05, 0x5b, 0xdf, 0x17, 0x32, 0x5f, 0xe3, 0xa5, 0x4a,
	0xe2, 0xcc, 0xfd, 0x55, 0x12, 0xbb, 0x0f, 0xeb, 0x69, 0x19, 0x12, 0xd3, 0xf2, 0x15, 0x2a, 0xbf,
	0xc4, 0xb3, 0x0e, 0xac, 0xd9, 0x23, 0xd9, 0xdd, 0xfa, 0xa8, 0x42, 0xa4, 0xbd, 0x75, 0x79, 0x81,
	0x63, 0x4f, 0xe0, 0xef, 0xc2, 0x4f, 0x4e, 0xcf, 0x46, 0x73, 0x6f, 0xb3, 0xb7, 0xfc, 0xff, 0xf3,
	0x62, 0x66, 0xe7, 0x03, 0x34, 0x29, 0xe9, 0x39, 0xbd, 0x93, 0x76, 0xa7, 0x86, 0x46, 0xc4, 0x26,
	0x7b, 0x06, 0x53, 0x60, 0xd9, 0x43, 0x19, 0x48, 0x33, 0xdf, 0x34, 0x02, 0xec, 0x7f, 0xa8, 0xa7,
	0x5f, 0x69, 0x3a, 0x6b, 0x73, 0xaf, 0xd9, 0x4b, 0xb1, 0xbd, 0x67, 0x3e, 0xd7, 0x9e, 0xed, 0x7f,
	0xbf, 0x6e, 0x39, 0x3f, 0xae, 0x5b, 0xce, 0xcf, 0xeb, 0x96, 0xf3, 0xf9, 0x57, 0xeb, 0xaf, 0xf7,
	0x8f, 0xce, 0xa5, 0xb9, 0x48, 0x46, 0xbd, 0xb1, 0x0a, 0xfa, 0x53, 0x19, 0x5e, 0x0a, 0xf9, 0x50,
	0xaa, 0xbe, 0x08, 0xfa, 0xf4, 0x42, 0x8f, 0x35, 0xc6, 0x57, 0x72, 0x8c, 0xba, 0xbf, 0x78, 0xc6,
	0x47, 0x35, 0x8a, 0x1f, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x81, 0x34, 0xb3, 0x7f, 0xf3, 0x05,
	0x00, 0x00,
}
