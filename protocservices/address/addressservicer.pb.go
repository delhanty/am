// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: address/addressservicer.proto

/*
	Package address is a generated protocol buffer package.

	It is generated from these files:
		address/addressservicer.proto

	It has these top-level messages:
		AddressesRequest
		AddressesResponse
		CountAddressesRequest
		CountAddressesResponse
		UpdateAddressRequest
		UpdateAddressesResponse
		DeleteAddressesRequest
		DeleteAddressesResponse
*/
package address

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import user "github.com/linkai-io/am/protocservices/prototypes"
import address1 "github.com/linkai-io/am/protocservices/prototypes"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddressesRequest struct {
	UserContext *user.UserContext       `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	Filter      *address1.AddressFilter `protobuf:"bytes,2,opt,name=Filter" json:"Filter,omitempty"`
}

func (m *AddressesRequest) Reset()                    { *m = AddressesRequest{} }
func (m *AddressesRequest) String() string            { return proto.CompactTextString(m) }
func (*AddressesRequest) ProtoMessage()               {}
func (*AddressesRequest) Descriptor() ([]byte, []int) { return fileDescriptorAddressservicer, []int{0} }

func (m *AddressesRequest) GetUserContext() *user.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *AddressesRequest) GetFilter() *address1.AddressFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

type AddressesResponse struct {
	OrgID     int32                 `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	Addresses *address1.AddressData `protobuf:"bytes,2,opt,name=Addresses" json:"Addresses,omitempty"`
}

func (m *AddressesResponse) Reset()                    { *m = AddressesResponse{} }
func (m *AddressesResponse) String() string            { return proto.CompactTextString(m) }
func (*AddressesResponse) ProtoMessage()               {}
func (*AddressesResponse) Descriptor() ([]byte, []int) { return fileDescriptorAddressservicer, []int{1} }

func (m *AddressesResponse) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *AddressesResponse) GetAddresses() *address1.AddressData {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type CountAddressesRequest struct {
	UserContext *user.UserContext `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	GroupID     int32             `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
}

func (m *CountAddressesRequest) Reset()         { *m = CountAddressesRequest{} }
func (m *CountAddressesRequest) String() string { return proto.CompactTextString(m) }
func (*CountAddressesRequest) ProtoMessage()    {}
func (*CountAddressesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorAddressservicer, []int{2}
}

func (m *CountAddressesRequest) GetUserContext() *user.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *CountAddressesRequest) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

type CountAddressesResponse struct {
	OrgID   int32 `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	GroupID int32 `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	Count   int32 `protobuf:"varint,3,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (m *CountAddressesResponse) Reset()         { *m = CountAddressesResponse{} }
func (m *CountAddressesResponse) String() string { return proto.CompactTextString(m) }
func (*CountAddressesResponse) ProtoMessage()    {}
func (*CountAddressesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorAddressservicer, []int{3}
}

func (m *CountAddressesResponse) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *CountAddressesResponse) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *CountAddressesResponse) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type UpdateAddressRequest struct {
	UserContext *user.UserContext       `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	Address     []*address1.AddressData `protobuf:"bytes,2,rep,name=Address" json:"Address,omitempty"`
}

func (m *UpdateAddressRequest) Reset()         { *m = UpdateAddressRequest{} }
func (m *UpdateAddressRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateAddressRequest) ProtoMessage()    {}
func (*UpdateAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorAddressservicer, []int{4}
}

func (m *UpdateAddressRequest) GetUserContext() *user.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *UpdateAddressRequest) GetAddress() []*address1.AddressData {
	if m != nil {
		return m.Address
	}
	return nil
}

type UpdateAddressesResponse struct {
	OrgID int32 `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	Count int32 `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (m *UpdateAddressesResponse) Reset()         { *m = UpdateAddressesResponse{} }
func (m *UpdateAddressesResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateAddressesResponse) ProtoMessage()    {}
func (*UpdateAddressesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorAddressservicer, []int{5}
}

func (m *UpdateAddressesResponse) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *UpdateAddressesResponse) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type DeleteAddressesRequest struct {
	UserContext *user.UserContext `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	GroupID     int32             `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	AddressIDs  []int64           `protobuf:"varint,3,rep,packed,name=AddressIDs" json:"AddressIDs,omitempty"`
}

func (m *DeleteAddressesRequest) Reset()         { *m = DeleteAddressesRequest{} }
func (m *DeleteAddressesRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteAddressesRequest) ProtoMessage()    {}
func (*DeleteAddressesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorAddressservicer, []int{6}
}

func (m *DeleteAddressesRequest) GetUserContext() *user.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *DeleteAddressesRequest) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *DeleteAddressesRequest) GetAddressIDs() []int64 {
	if m != nil {
		return m.AddressIDs
	}
	return nil
}

type DeleteAddressesResponse struct {
	OrgID int32 `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
}

func (m *DeleteAddressesResponse) Reset()         { *m = DeleteAddressesResponse{} }
func (m *DeleteAddressesResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteAddressesResponse) ProtoMessage()    {}
func (*DeleteAddressesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorAddressservicer, []int{7}
}

func (m *DeleteAddressesResponse) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func init() {
	proto.RegisterType((*AddressesRequest)(nil), "address.AddressesRequest")
	proto.RegisterType((*AddressesResponse)(nil), "address.AddressesResponse")
	proto.RegisterType((*CountAddressesRequest)(nil), "address.CountAddressesRequest")
	proto.RegisterType((*CountAddressesResponse)(nil), "address.CountAddressesResponse")
	proto.RegisterType((*UpdateAddressRequest)(nil), "address.UpdateAddressRequest")
	proto.RegisterType((*UpdateAddressesResponse)(nil), "address.UpdateAddressesResponse")
	proto.RegisterType((*DeleteAddressesRequest)(nil), "address.DeleteAddressesRequest")
	proto.RegisterType((*DeleteAddressesResponse)(nil), "address.DeleteAddressesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Address service

type AddressClient interface {
	Get(ctx context.Context, in *AddressesRequest, opts ...grpc.CallOption) (Address_GetClient, error)
	Update(ctx context.Context, in *UpdateAddressRequest, opts ...grpc.CallOption) (*UpdateAddressesResponse, error)
	Delete(ctx context.Context, in *DeleteAddressesRequest, opts ...grpc.CallOption) (*DeleteAddressesResponse, error)
	Count(ctx context.Context, in *CountAddressesRequest, opts ...grpc.CallOption) (*CountAddressesResponse, error)
}

type addressClient struct {
	cc *grpc.ClientConn
}

func NewAddressClient(cc *grpc.ClientConn) AddressClient {
	return &addressClient{cc}
}

func (c *addressClient) Get(ctx context.Context, in *AddressesRequest, opts ...grpc.CallOption) (Address_GetClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Address_serviceDesc.Streams[0], c.cc, "/address.Address/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &addressGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Address_GetClient interface {
	Recv() (*AddressesResponse, error)
	grpc.ClientStream
}

type addressGetClient struct {
	grpc.ClientStream
}

func (x *addressGetClient) Recv() (*AddressesResponse, error) {
	m := new(AddressesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *addressClient) Update(ctx context.Context, in *UpdateAddressRequest, opts ...grpc.CallOption) (*UpdateAddressesResponse, error) {
	out := new(UpdateAddressesResponse)
	err := grpc.Invoke(ctx, "/address.Address/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressClient) Delete(ctx context.Context, in *DeleteAddressesRequest, opts ...grpc.CallOption) (*DeleteAddressesResponse, error) {
	out := new(DeleteAddressesResponse)
	err := grpc.Invoke(ctx, "/address.Address/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressClient) Count(ctx context.Context, in *CountAddressesRequest, opts ...grpc.CallOption) (*CountAddressesResponse, error) {
	out := new(CountAddressesResponse)
	err := grpc.Invoke(ctx, "/address.Address/Count", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Address service

type AddressServer interface {
	Get(*AddressesRequest, Address_GetServer) error
	Update(context.Context, *UpdateAddressRequest) (*UpdateAddressesResponse, error)
	Delete(context.Context, *DeleteAddressesRequest) (*DeleteAddressesResponse, error)
	Count(context.Context, *CountAddressesRequest) (*CountAddressesResponse, error)
}

func RegisterAddressServer(s *grpc.Server, srv AddressServer) {
	s.RegisterService(&_Address_serviceDesc, srv)
}

func _Address_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AddressesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AddressServer).Get(m, &addressGetServer{stream})
}

type Address_GetServer interface {
	Send(*AddressesResponse) error
	grpc.ServerStream
}

type addressGetServer struct {
	grpc.ServerStream
}

func (x *addressGetServer) Send(m *AddressesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Address_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/address.Address/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServer).Update(ctx, req.(*UpdateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Address_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/address.Address/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServer).Delete(ctx, req.(*DeleteAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Address_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/address.Address/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServer).Count(ctx, req.(*CountAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Address_serviceDesc = grpc.ServiceDesc{
	ServiceName: "address.Address",
	HandlerType: (*AddressServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _Address_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Address_Delete_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _Address_Count_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _Address_Get_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "address/addressservicer.proto",
}

func (m *AddressesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.UserContext.Size()))
		n1, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Filter != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.Filter.Size()))
		n2, err := m.Filter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *AddressesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.OrgID))
	}
	if m.Addresses != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.Addresses.Size()))
		n3, err := m.Addresses.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *CountAddressesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountAddressesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.UserContext.Size()))
		n4, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.GroupID))
	}
	return i, nil
}

func (m *CountAddressesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountAddressesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.GroupID))
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *UpdateAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.UserContext.Size()))
		n5, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Address) > 0 {
		for _, msg := range m.Address {
			dAtA[i] = 0x12
			i++
			i = encodeVarintAddressservicer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateAddressesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAddressesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.OrgID))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *DeleteAddressesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAddressesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.UserContext.Size()))
		n6, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.GroupID))
	}
	if len(m.AddressIDs) > 0 {
		dAtA8 := make([]byte, len(m.AddressIDs)*10)
		var j7 int
		for _, num1 := range m.AddressIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	return i, nil
}

func (m *DeleteAddressesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAddressesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.OrgID))
	}
	return i, nil
}

func encodeVarintAddressservicer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AddressesRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovAddressservicer(uint64(l))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovAddressservicer(uint64(l))
	}
	return n
}

func (m *AddressesResponse) Size() (n int) {
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovAddressservicer(uint64(m.OrgID))
	}
	if m.Addresses != nil {
		l = m.Addresses.Size()
		n += 1 + l + sovAddressservicer(uint64(l))
	}
	return n
}

func (m *CountAddressesRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovAddressservicer(uint64(l))
	}
	if m.GroupID != 0 {
		n += 1 + sovAddressservicer(uint64(m.GroupID))
	}
	return n
}

func (m *CountAddressesResponse) Size() (n int) {
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovAddressservicer(uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		n += 1 + sovAddressservicer(uint64(m.GroupID))
	}
	if m.Count != 0 {
		n += 1 + sovAddressservicer(uint64(m.Count))
	}
	return n
}

func (m *UpdateAddressRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovAddressservicer(uint64(l))
	}
	if len(m.Address) > 0 {
		for _, e := range m.Address {
			l = e.Size()
			n += 1 + l + sovAddressservicer(uint64(l))
		}
	}
	return n
}

func (m *UpdateAddressesResponse) Size() (n int) {
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovAddressservicer(uint64(m.OrgID))
	}
	if m.Count != 0 {
		n += 1 + sovAddressservicer(uint64(m.Count))
	}
	return n
}

func (m *DeleteAddressesRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovAddressservicer(uint64(l))
	}
	if m.GroupID != 0 {
		n += 1 + sovAddressservicer(uint64(m.GroupID))
	}
	if len(m.AddressIDs) > 0 {
		l = 0
		for _, e := range m.AddressIDs {
			l += sovAddressservicer(uint64(e))
		}
		n += 1 + sovAddressservicer(uint64(l)) + l
	}
	return n
}

func (m *DeleteAddressesResponse) Size() (n int) {
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovAddressservicer(uint64(m.OrgID))
	}
	return n
}

func sovAddressservicer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAddressservicer(x uint64) (n int) {
	return sovAddressservicer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddressesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddressservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAddressservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &user.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAddressservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &address1.AddressFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAddressservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddressservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddressservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAddressservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Addresses == nil {
				m.Addresses = &address1.AddressData{}
			}
			if err := m.Addresses.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAddressservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddressservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountAddressesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddressservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountAddressesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountAddressesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAddressservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &user.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAddressservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddressservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountAddressesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddressservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountAddressesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountAddressesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAddressservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddressservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddressservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAddressservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &user.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAddressservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address, &address1.AddressData{})
			if err := m.Address[len(m.Address)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAddressservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddressservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAddressesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddressservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAddressesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAddressesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAddressservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddressservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAddressesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddressservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAddressesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAddressesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAddressservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &user.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAddressservicer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AddressIDs = append(m.AddressIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAddressservicer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAddressservicer
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAddressservicer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AddressIDs = append(m.AddressIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAddressservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddressservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAddressesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddressservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAddressesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAddressesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAddressservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddressservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAddressservicer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAddressservicer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAddressservicer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAddressservicer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAddressservicer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAddressservicer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAddressservicer   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("address/addressservicer.proto", fileDescriptorAddressservicer) }

var fileDescriptorAddressservicer = []byte{
	// 445 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xc1, 0xaa, 0xd3, 0x40,
	0x14, 0x35, 0x09, 0x4d, 0xf1, 0xbe, 0x87, 0xe8, 0xf0, 0x5e, 0x1b, 0x03, 0x4d, 0x43, 0x16, 0x52,
	0x04, 0x13, 0xa9, 0x7b, 0x51, 0x1b, 0xad, 0xc1, 0x85, 0x10, 0xe8, 0xc6, 0x85, 0x90, 0xb6, 0x43,
	0x8d, 0xb6, 0x99, 0x38, 0x33, 0x11, 0xdd, 0xfa, 0x15, 0xfe, 0x83, 0x3f, 0xe2, 0xd2, 0x4f, 0x90,
	0xfa, 0x23, 0xe2, 0xcc, 0x24, 0x4e, 0xdb, 0xb4, 0x82, 0xbe, 0x55, 0xb8, 0xe7, 0x1c, 0xce, 0xbd,
	0xe7, 0x0e, 0xb9, 0x30, 0xc8, 0x96, 0x4b, 0x8a, 0x19, 0x8b, 0xd4, 0x97, 0x61, 0xfa, 0x21, 0x5f,
	0x60, 0x1a, 0x96, 0x94, 0x70, 0x82, 0xba, 0x0a, 0x76, 0x2f, 0x45, 0xcd, 0x3f, 0x95, 0x98, 0x45,
	0x15, 0xab, 0x79, 0xd7, 0xd1, 0x60, 0x25, 0x95, 0x4c, 0xf0, 0x16, 0x6e, 0x3e, 0x96, 0x00, 0x66,
	0x29, 0x7e, 0x5f, 0x61, 0xc6, 0x51, 0x08, 0x67, 0x33, 0x86, 0xe9, 0x84, 0x14, 0x1c, 0x7f, 0xe4,
	0x8e, 0xe1, 0x1b, 0xa3, 0xb3, 0xf1, 0x79, 0xa8, 0x61, 0xa9, 0x2e, 0x40, 0x77, 0xc0, 0x7e, 0x96,
	0xaf, 0x39, 0xa6, 0x8e, 0x29, 0xa4, 0x37, 0x42, 0x65, 0x29, 0xd1, 0x54, 0xb1, 0xc1, 0x0c, 0x6e,
	0x69, 0xbd, 0x58, 0x49, 0x0a, 0x86, 0xd1, 0x05, 0x74, 0x5e, 0xd2, 0x55, 0x12, 0x8b, 0x36, 0x9d,
	0x54, 0x16, 0xe8, 0x2e, 0x5c, 0x6f, 0xa4, 0xca, 0xf5, 0xbc, 0x76, 0x8d, 0x33, 0x9e, 0xa5, 0x7f,
	0xe8, 0x20, 0x83, 0xcb, 0x09, 0xa9, 0x0a, 0xfe, 0xdf, 0x39, 0x1c, 0xe8, 0x4e, 0x29, 0xa9, 0xca,
	0x24, 0x16, 0x2d, 0x3b, 0x69, 0x5d, 0x06, 0xaf, 0xa1, 0xb7, 0xdf, 0xe2, 0xe4, 0xf8, 0x47, 0x9d,
	0x7e, 0xeb, 0x85, 0x93, 0x63, 0x49, 0xbd, 0x28, 0x82, 0x02, 0x2e, 0x66, 0xe5, 0x32, 0xe3, 0x58,
	0x35, 0xf8, 0xf7, 0x97, 0xe8, 0x2a, 0x07, 0xc7, 0xf4, 0xad, 0x83, 0xa5, 0xd5, 0x64, 0xf0, 0x14,
	0xfa, 0x3b, 0xfd, 0xfe, 0x1a, 0xa8, 0x19, 0xdb, 0xd4, 0xc7, 0xfe, 0x6c, 0x40, 0x2f, 0xc6, 0x6b,
	0xbc, 0xe3, 0x73, 0xc5, 0xbb, 0x47, 0x1e, 0x80, 0x72, 0x4f, 0x62, 0xe6, 0x58, 0xbe, 0x35, 0xb2,
	0x52, 0x0d, 0x09, 0x22, 0xe8, 0x1f, 0xcc, 0x70, 0x2a, 0xcb, 0xf8, 0xab, 0xd9, 0x6c, 0x09, 0x3d,
	0x04, 0x6b, 0x8a, 0x39, 0xba, 0x1d, 0xd6, 0x7f, 0xc5, 0x7e, 0x10, 0xd7, 0x6d, 0xa3, 0xa4, 0xff,
	0x7d, 0x03, 0x25, 0x60, 0xcb, 0x45, 0xa2, 0x41, 0xa3, 0x6b, 0x7b, 0x49, 0xd7, 0x6f, 0xa7, 0xb5,
	0x61, 0x5f, 0x80, 0x2d, 0x73, 0xa0, 0x61, 0xa3, 0x6d, 0x5f, 0xae, 0x66, 0x76, 0x2c, 0xf9, 0x73,
	0xf5, 0x5e, 0xc8, 0x6b, 0xa4, 0xad, 0xff, 0x88, 0x3b, 0x3c, 0xca, 0x4b, 0xa7, 0x27, 0x8f, 0xbe,
	0x6d, 0x3d, 0xe3, 0xfb, 0xd6, 0x33, 0x7e, 0x6c, 0x3d, 0xe3, 0xcb, 0x4f, 0xef, 0xda, 0xab, 0x70,
	0x95, 0xf3, 0x37, 0xd5, 0x3c, 0x5c, 0x90, 0x4d, 0xb4, 0xce, 0x8b, 0x77, 0x59, 0x7e, 0x2f, 0x27,
	0x51, 0xb6, 0x89, 0xc4, 0x45, 0x59, 0xa8, 0xd3, 0xd4, 0x1c, 0x9a, 0xb9, 0x2d, 0xf0, 0x07, 0xbf,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x0c, 0xc7, 0x41, 0xc4, 0x04, 0x00, 0x00,
}
