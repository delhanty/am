// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: address/addressservicer.proto

/*
	Package address is a generated protocol buffer package.

	It is generated from these files:
		address/addressservicer.proto

	It has these top-level messages:
		AddressData
		AddressFilter
		AddressesRequest
		AddressesResponse
		CountAddressesRequest
		CountAddressesResponse
		UpdateAddressRequest
		UpdateAddressesResponse
		DeleteAddressesRequest
		DeleteAddressesResponse
*/
package address

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import user "gopkg.linkai.io/v1/repos/am/protocservices/prototypes"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddressData struct {
	OrgID           int32  `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	AddressID       int64  `protobuf:"varint,2,opt,name=AddressID,proto3" json:"AddressID,omitempty"`
	GroupID         int32  `protobuf:"varint,3,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	HostAddress     string `protobuf:"bytes,4,opt,name=HostAddress,proto3" json:"HostAddress,omitempty"`
	IPAddress       string `protobuf:"bytes,5,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	DiscoveryTime   int64  `protobuf:"varint,6,opt,name=DiscoveryTime,proto3" json:"DiscoveryTime,omitempty"`
	DiscoveredBy    string `protobuf:"bytes,7,opt,name=DiscoveredBy,proto3" json:"DiscoveredBy,omitempty"`
	LastJobID       int64  `protobuf:"varint,8,opt,name=LastJobID,proto3" json:"LastJobID,omitempty"`
	LastSeenTime    int64  `protobuf:"varint,9,opt,name=LastSeenTime,proto3" json:"LastSeenTime,omitempty"`
	IsSOA           bool   `protobuf:"varint,10,opt,name=IsSOA,proto3" json:"IsSOA,omitempty"`
	IsWildcardZone  bool   `protobuf:"varint,11,opt,name=IsWildcardZone,proto3" json:"IsWildcardZone,omitempty"`
	IsHostedService bool   `protobuf:"varint,12,opt,name=IsHostedService,proto3" json:"IsHostedService,omitempty"`
	Ignored         bool   `protobuf:"varint,13,opt,name=Ignored,proto3" json:"Ignored,omitempty"`
	Deleted         bool   `protobuf:"varint,14,opt,name=Deleted,proto3" json:"Deleted,omitempty"`
}

func (m *AddressData) Reset()                    { *m = AddressData{} }
func (m *AddressData) String() string            { return proto.CompactTextString(m) }
func (*AddressData) ProtoMessage()               {}
func (*AddressData) Descriptor() ([]byte, []int) { return fileDescriptorAddressservicer, []int{0} }

func (m *AddressData) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *AddressData) GetAddressID() int64 {
	if m != nil {
		return m.AddressID
	}
	return 0
}

func (m *AddressData) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *AddressData) GetHostAddress() string {
	if m != nil {
		return m.HostAddress
	}
	return ""
}

func (m *AddressData) GetIPAddress() string {
	if m != nil {
		return m.IPAddress
	}
	return ""
}

func (m *AddressData) GetDiscoveryTime() int64 {
	if m != nil {
		return m.DiscoveryTime
	}
	return 0
}

func (m *AddressData) GetDiscoveredBy() string {
	if m != nil {
		return m.DiscoveredBy
	}
	return ""
}

func (m *AddressData) GetLastJobID() int64 {
	if m != nil {
		return m.LastJobID
	}
	return 0
}

func (m *AddressData) GetLastSeenTime() int64 {
	if m != nil {
		return m.LastSeenTime
	}
	return 0
}

func (m *AddressData) GetIsSOA() bool {
	if m != nil {
		return m.IsSOA
	}
	return false
}

func (m *AddressData) GetIsWildcardZone() bool {
	if m != nil {
		return m.IsWildcardZone
	}
	return false
}

func (m *AddressData) GetIsHostedService() bool {
	if m != nil {
		return m.IsHostedService
	}
	return false
}

func (m *AddressData) GetIgnored() bool {
	if m != nil {
		return m.Ignored
	}
	return false
}

func (m *AddressData) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

type AddressFilter struct {
	OrgID        int32 `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	GroupID      int32 `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	Start        int32 `protobuf:"varint,3,opt,name=Start,proto3" json:"Start,omitempty"`
	Limit        int32 `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`
	WithIgnored  bool  `protobuf:"varint,5,opt,name=WithIgnored,proto3" json:"WithIgnored,omitempty"`
	IgnoredValue bool  `protobuf:"varint,6,opt,name=IgnoredValue,proto3" json:"IgnoredValue,omitempty"`
	WithDeleted  bool  `protobuf:"varint,7,opt,name=WithDeleted,proto3" json:"WithDeleted,omitempty"`
	DeletedValue bool  `protobuf:"varint,8,opt,name=DeletedValue,proto3" json:"DeletedValue,omitempty"`
}

func (m *AddressFilter) Reset()                    { *m = AddressFilter{} }
func (m *AddressFilter) String() string            { return proto.CompactTextString(m) }
func (*AddressFilter) ProtoMessage()               {}
func (*AddressFilter) Descriptor() ([]byte, []int) { return fileDescriptorAddressservicer, []int{1} }

func (m *AddressFilter) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *AddressFilter) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *AddressFilter) GetStart() int32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *AddressFilter) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *AddressFilter) GetWithIgnored() bool {
	if m != nil {
		return m.WithIgnored
	}
	return false
}

func (m *AddressFilter) GetIgnoredValue() bool {
	if m != nil {
		return m.IgnoredValue
	}
	return false
}

func (m *AddressFilter) GetWithDeleted() bool {
	if m != nil {
		return m.WithDeleted
	}
	return false
}

func (m *AddressFilter) GetDeletedValue() bool {
	if m != nil {
		return m.DeletedValue
	}
	return false
}

type AddressesRequest struct {
	UserContext *user.UserContext `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	Filter      *AddressFilter    `protobuf:"bytes,2,opt,name=Filter" json:"Filter,omitempty"`
}

func (m *AddressesRequest) Reset()                    { *m = AddressesRequest{} }
func (m *AddressesRequest) String() string            { return proto.CompactTextString(m) }
func (*AddressesRequest) ProtoMessage()               {}
func (*AddressesRequest) Descriptor() ([]byte, []int) { return fileDescriptorAddressservicer, []int{2} }

func (m *AddressesRequest) GetUserContext() *user.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *AddressesRequest) GetFilter() *AddressFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

type AddressesResponse struct {
	OrgID     int32        `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	Addresses *AddressData `protobuf:"bytes,2,opt,name=Addresses" json:"Addresses,omitempty"`
}

func (m *AddressesResponse) Reset()                    { *m = AddressesResponse{} }
func (m *AddressesResponse) String() string            { return proto.CompactTextString(m) }
func (*AddressesResponse) ProtoMessage()               {}
func (*AddressesResponse) Descriptor() ([]byte, []int) { return fileDescriptorAddressservicer, []int{3} }

func (m *AddressesResponse) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *AddressesResponse) GetAddresses() *AddressData {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type CountAddressesRequest struct {
	UserContext *user.UserContext `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	GroupID     int32             `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
}

func (m *CountAddressesRequest) Reset()         { *m = CountAddressesRequest{} }
func (m *CountAddressesRequest) String() string { return proto.CompactTextString(m) }
func (*CountAddressesRequest) ProtoMessage()    {}
func (*CountAddressesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorAddressservicer, []int{4}
}

func (m *CountAddressesRequest) GetUserContext() *user.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *CountAddressesRequest) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

type CountAddressesResponse struct {
	OrgID   int32 `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	GroupID int32 `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	Count   int32 `protobuf:"varint,3,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (m *CountAddressesResponse) Reset()         { *m = CountAddressesResponse{} }
func (m *CountAddressesResponse) String() string { return proto.CompactTextString(m) }
func (*CountAddressesResponse) ProtoMessage()    {}
func (*CountAddressesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorAddressservicer, []int{5}
}

func (m *CountAddressesResponse) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *CountAddressesResponse) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *CountAddressesResponse) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type UpdateAddressRequest struct {
	UserContext *user.UserContext `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	Address     *AddressData      `protobuf:"bytes,2,opt,name=Address" json:"Address,omitempty"`
}

func (m *UpdateAddressRequest) Reset()         { *m = UpdateAddressRequest{} }
func (m *UpdateAddressRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateAddressRequest) ProtoMessage()    {}
func (*UpdateAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorAddressservicer, []int{6}
}

func (m *UpdateAddressRequest) GetUserContext() *user.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *UpdateAddressRequest) GetAddress() *AddressData {
	if m != nil {
		return m.Address
	}
	return nil
}

type UpdateAddressesResponse struct {
	OrgID int32 `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	Count int32 `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (m *UpdateAddressesResponse) Reset()         { *m = UpdateAddressesResponse{} }
func (m *UpdateAddressesResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateAddressesResponse) ProtoMessage()    {}
func (*UpdateAddressesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorAddressservicer, []int{7}
}

func (m *UpdateAddressesResponse) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *UpdateAddressesResponse) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type DeleteAddressesRequest struct {
	UserContext *user.UserContext `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	GroupID     int32             `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	AddressIDs  []int64           `protobuf:"varint,3,rep,packed,name=AddressIDs" json:"AddressIDs,omitempty"`
}

func (m *DeleteAddressesRequest) Reset()         { *m = DeleteAddressesRequest{} }
func (m *DeleteAddressesRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteAddressesRequest) ProtoMessage()    {}
func (*DeleteAddressesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorAddressservicer, []int{8}
}

func (m *DeleteAddressesRequest) GetUserContext() *user.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *DeleteAddressesRequest) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *DeleteAddressesRequest) GetAddressIDs() []int64 {
	if m != nil {
		return m.AddressIDs
	}
	return nil
}

type DeleteAddressesResponse struct {
	OrgID int32 `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
}

func (m *DeleteAddressesResponse) Reset()         { *m = DeleteAddressesResponse{} }
func (m *DeleteAddressesResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteAddressesResponse) ProtoMessage()    {}
func (*DeleteAddressesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorAddressservicer, []int{9}
}

func (m *DeleteAddressesResponse) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func init() {
	proto.RegisterType((*AddressData)(nil), "address.AddressData")
	proto.RegisterType((*AddressFilter)(nil), "address.AddressFilter")
	proto.RegisterType((*AddressesRequest)(nil), "address.AddressesRequest")
	proto.RegisterType((*AddressesResponse)(nil), "address.AddressesResponse")
	proto.RegisterType((*CountAddressesRequest)(nil), "address.CountAddressesRequest")
	proto.RegisterType((*CountAddressesResponse)(nil), "address.CountAddressesResponse")
	proto.RegisterType((*UpdateAddressRequest)(nil), "address.UpdateAddressRequest")
	proto.RegisterType((*UpdateAddressesResponse)(nil), "address.UpdateAddressesResponse")
	proto.RegisterType((*DeleteAddressesRequest)(nil), "address.DeleteAddressesRequest")
	proto.RegisterType((*DeleteAddressesResponse)(nil), "address.DeleteAddressesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Address service

type AddressClient interface {
	Addresses(ctx context.Context, in *AddressesRequest, opts ...grpc.CallOption) (Address_AddressesClient, error)
	UpdateAddresses(ctx context.Context, opts ...grpc.CallOption) (Address_UpdateAddressesClient, error)
	AddressCount(ctx context.Context, in *CountAddressesRequest, opts ...grpc.CallOption) (*CountAddressesResponse, error)
	Delete(ctx context.Context, in *DeleteAddressesRequest, opts ...grpc.CallOption) (*DeleteAddressesResponse, error)
}

type addressClient struct {
	cc *grpc.ClientConn
}

func NewAddressClient(cc *grpc.ClientConn) AddressClient {
	return &addressClient{cc}
}

func (c *addressClient) Addresses(ctx context.Context, in *AddressesRequest, opts ...grpc.CallOption) (Address_AddressesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Address_serviceDesc.Streams[0], c.cc, "/address.Address/Addresses", opts...)
	if err != nil {
		return nil, err
	}
	x := &addressAddressesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Address_AddressesClient interface {
	Recv() (*AddressesResponse, error)
	grpc.ClientStream
}

type addressAddressesClient struct {
	grpc.ClientStream
}

func (x *addressAddressesClient) Recv() (*AddressesResponse, error) {
	m := new(AddressesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *addressClient) UpdateAddresses(ctx context.Context, opts ...grpc.CallOption) (Address_UpdateAddressesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Address_serviceDesc.Streams[1], c.cc, "/address.Address/UpdateAddresses", opts...)
	if err != nil {
		return nil, err
	}
	x := &addressUpdateAddressesClient{stream}
	return x, nil
}

type Address_UpdateAddressesClient interface {
	Send(*UpdateAddressRequest) error
	CloseAndRecv() (*UpdateAddressesResponse, error)
	grpc.ClientStream
}

type addressUpdateAddressesClient struct {
	grpc.ClientStream
}

func (x *addressUpdateAddressesClient) Send(m *UpdateAddressRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *addressUpdateAddressesClient) CloseAndRecv() (*UpdateAddressesResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UpdateAddressesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *addressClient) AddressCount(ctx context.Context, in *CountAddressesRequest, opts ...grpc.CallOption) (*CountAddressesResponse, error) {
	out := new(CountAddressesResponse)
	err := grpc.Invoke(ctx, "/address.Address/AddressCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressClient) Delete(ctx context.Context, in *DeleteAddressesRequest, opts ...grpc.CallOption) (*DeleteAddressesResponse, error) {
	out := new(DeleteAddressesResponse)
	err := grpc.Invoke(ctx, "/address.Address/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Address service

type AddressServer interface {
	Addresses(*AddressesRequest, Address_AddressesServer) error
	UpdateAddresses(Address_UpdateAddressesServer) error
	AddressCount(context.Context, *CountAddressesRequest) (*CountAddressesResponse, error)
	Delete(context.Context, *DeleteAddressesRequest) (*DeleteAddressesResponse, error)
}

func RegisterAddressServer(s *grpc.Server, srv AddressServer) {
	s.RegisterService(&_Address_serviceDesc, srv)
}

func _Address_Addresses_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AddressesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AddressServer).Addresses(m, &addressAddressesServer{stream})
}

type Address_AddressesServer interface {
	Send(*AddressesResponse) error
	grpc.ServerStream
}

type addressAddressesServer struct {
	grpc.ServerStream
}

func (x *addressAddressesServer) Send(m *AddressesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Address_UpdateAddresses_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AddressServer).UpdateAddresses(&addressUpdateAddressesServer{stream})
}

type Address_UpdateAddressesServer interface {
	SendAndClose(*UpdateAddressesResponse) error
	Recv() (*UpdateAddressRequest, error)
	grpc.ServerStream
}

type addressUpdateAddressesServer struct {
	grpc.ServerStream
}

func (x *addressUpdateAddressesServer) SendAndClose(m *UpdateAddressesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *addressUpdateAddressesServer) Recv() (*UpdateAddressRequest, error) {
	m := new(UpdateAddressRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Address_AddressCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServer).AddressCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/address.Address/AddressCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServer).AddressCount(ctx, req.(*CountAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Address_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/address.Address/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServer).Delete(ctx, req.(*DeleteAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Address_serviceDesc = grpc.ServiceDesc{
	ServiceName: "address.Address",
	HandlerType: (*AddressServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddressCount",
			Handler:    _Address_AddressCount_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Address_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Addresses",
			Handler:       _Address_Addresses_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateAddresses",
			Handler:       _Address_UpdateAddresses_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "address/addressservicer.proto",
}

func (m *AddressData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.OrgID))
	}
	if m.AddressID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.AddressID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.GroupID))
	}
	if len(m.HostAddress) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(len(m.HostAddress)))
		i += copy(dAtA[i:], m.HostAddress)
	}
	if len(m.IPAddress) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(len(m.IPAddress)))
		i += copy(dAtA[i:], m.IPAddress)
	}
	if m.DiscoveryTime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.DiscoveryTime))
	}
	if len(m.DiscoveredBy) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(len(m.DiscoveredBy)))
		i += copy(dAtA[i:], m.DiscoveredBy)
	}
	if m.LastJobID != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.LastJobID))
	}
	if m.LastSeenTime != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.LastSeenTime))
	}
	if m.IsSOA {
		dAtA[i] = 0x50
		i++
		if m.IsSOA {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsWildcardZone {
		dAtA[i] = 0x58
		i++
		if m.IsWildcardZone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsHostedService {
		dAtA[i] = 0x60
		i++
		if m.IsHostedService {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ignored {
		dAtA[i] = 0x68
		i++
		if m.Ignored {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Deleted {
		dAtA[i] = 0x70
		i++
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *AddressFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.GroupID))
	}
	if m.Start != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.Start))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.Limit))
	}
	if m.WithIgnored {
		dAtA[i] = 0x28
		i++
		if m.WithIgnored {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IgnoredValue {
		dAtA[i] = 0x30
		i++
		if m.IgnoredValue {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.WithDeleted {
		dAtA[i] = 0x38
		i++
		if m.WithDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DeletedValue {
		dAtA[i] = 0x40
		i++
		if m.DeletedValue {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *AddressesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.UserContext.Size()))
		n1, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Filter != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.Filter.Size()))
		n2, err := m.Filter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *AddressesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.OrgID))
	}
	if m.Addresses != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.Addresses.Size()))
		n3, err := m.Addresses.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *CountAddressesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountAddressesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.UserContext.Size()))
		n4, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.GroupID))
	}
	return i, nil
}

func (m *CountAddressesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountAddressesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.GroupID))
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *UpdateAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.UserContext.Size()))
		n5, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Address != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.Address.Size()))
		n6, err := m.Address.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *UpdateAddressesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAddressesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.OrgID))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *DeleteAddressesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAddressesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.UserContext.Size()))
		n7, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.GroupID))
	}
	if len(m.AddressIDs) > 0 {
		dAtA9 := make([]byte, len(m.AddressIDs)*10)
		var j8 int
		for _, num1 := range m.AddressIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(j8))
		i += copy(dAtA[i:], dAtA9[:j8])
	}
	return i, nil
}

func (m *DeleteAddressesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAddressesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.OrgID))
	}
	return i, nil
}

func encodeVarintAddressservicer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AddressData) Size() (n int) {
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovAddressservicer(uint64(m.OrgID))
	}
	if m.AddressID != 0 {
		n += 1 + sovAddressservicer(uint64(m.AddressID))
	}
	if m.GroupID != 0 {
		n += 1 + sovAddressservicer(uint64(m.GroupID))
	}
	l = len(m.HostAddress)
	if l > 0 {
		n += 1 + l + sovAddressservicer(uint64(l))
	}
	l = len(m.IPAddress)
	if l > 0 {
		n += 1 + l + sovAddressservicer(uint64(l))
	}
	if m.DiscoveryTime != 0 {
		n += 1 + sovAddressservicer(uint64(m.DiscoveryTime))
	}
	l = len(m.DiscoveredBy)
	if l > 0 {
		n += 1 + l + sovAddressservicer(uint64(l))
	}
	if m.LastJobID != 0 {
		n += 1 + sovAddressservicer(uint64(m.LastJobID))
	}
	if m.LastSeenTime != 0 {
		n += 1 + sovAddressservicer(uint64(m.LastSeenTime))
	}
	if m.IsSOA {
		n += 2
	}
	if m.IsWildcardZone {
		n += 2
	}
	if m.IsHostedService {
		n += 2
	}
	if m.Ignored {
		n += 2
	}
	if m.Deleted {
		n += 2
	}
	return n
}

func (m *AddressFilter) Size() (n int) {
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovAddressservicer(uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		n += 1 + sovAddressservicer(uint64(m.GroupID))
	}
	if m.Start != 0 {
		n += 1 + sovAddressservicer(uint64(m.Start))
	}
	if m.Limit != 0 {
		n += 1 + sovAddressservicer(uint64(m.Limit))
	}
	if m.WithIgnored {
		n += 2
	}
	if m.IgnoredValue {
		n += 2
	}
	if m.WithDeleted {
		n += 2
	}
	if m.DeletedValue {
		n += 2
	}
	return n
}

func (m *AddressesRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovAddressservicer(uint64(l))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovAddressservicer(uint64(l))
	}
	return n
}

func (m *AddressesResponse) Size() (n int) {
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovAddressservicer(uint64(m.OrgID))
	}
	if m.Addresses != nil {
		l = m.Addresses.Size()
		n += 1 + l + sovAddressservicer(uint64(l))
	}
	return n
}

func (m *CountAddressesRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovAddressservicer(uint64(l))
	}
	if m.GroupID != 0 {
		n += 1 + sovAddressservicer(uint64(m.GroupID))
	}
	return n
}

func (m *CountAddressesResponse) Size() (n int) {
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovAddressservicer(uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		n += 1 + sovAddressservicer(uint64(m.GroupID))
	}
	if m.Count != 0 {
		n += 1 + sovAddressservicer(uint64(m.Count))
	}
	return n
}

func (m *UpdateAddressRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovAddressservicer(uint64(l))
	}
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovAddressservicer(uint64(l))
	}
	return n
}

func (m *UpdateAddressesResponse) Size() (n int) {
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovAddressservicer(uint64(m.OrgID))
	}
	if m.Count != 0 {
		n += 1 + sovAddressservicer(uint64(m.Count))
	}
	return n
}

func (m *DeleteAddressesRequest) Size() (n int) {
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovAddressservicer(uint64(l))
	}
	if m.GroupID != 0 {
		n += 1 + sovAddressservicer(uint64(m.GroupID))
	}
	if len(m.AddressIDs) > 0 {
		l = 0
		for _, e := range m.AddressIDs {
			l += sovAddressservicer(uint64(e))
		}
		n += 1 + sovAddressservicer(uint64(l)) + l
	}
	return n
}

func (m *DeleteAddressesResponse) Size() (n int) {
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovAddressservicer(uint64(m.OrgID))
	}
	return n
}

func sovAddressservicer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAddressservicer(x uint64) (n int) {
	return sovAddressservicer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddressData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddressservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressID", wireType)
			}
			m.AddressID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddressID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddressservicer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddressservicer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscoveryTime", wireType)
			}
			m.DiscoveryTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiscoveryTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscoveredBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddressservicer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiscoveredBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastJobID", wireType)
			}
			m.LastJobID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastJobID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeenTime", wireType)
			}
			m.LastSeenTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSeenTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSOA", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSOA = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWildcardZone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWildcardZone = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHostedService", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsHostedService = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ignored", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ignored = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAddressservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddressservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddressservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithIgnored", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithIgnored = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgnoredValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IgnoredValue = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithDeleted = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeletedValue = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAddressservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddressservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddressservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAddressservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &user.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAddressservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &AddressFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAddressservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddressservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddressservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAddressservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Addresses == nil {
				m.Addresses = &AddressData{}
			}
			if err := m.Addresses.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAddressservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddressservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountAddressesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddressservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountAddressesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountAddressesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAddressservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &user.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAddressservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddressservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountAddressesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddressservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountAddressesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountAddressesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAddressservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddressservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddressservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAddressservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &user.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAddressservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &AddressData{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAddressservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddressservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAddressesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddressservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAddressesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAddressesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAddressservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddressservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAddressesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddressservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAddressesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAddressesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAddressservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &user.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAddressservicer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AddressIDs = append(m.AddressIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAddressservicer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAddressservicer
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAddressservicer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AddressIDs = append(m.AddressIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAddressservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddressservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAddressesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddressservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAddressesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAddressesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAddressservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddressservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAddressservicer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAddressservicer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAddressservicer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAddressservicer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAddressservicer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAddressservicer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAddressservicer   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("address/addressservicer.proto", fileDescriptorAddressservicer) }

var fileDescriptorAddressservicer = []byte{
	// 705 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x09, 0xf9, 0xe9, 0x24, 0x6d, 0x61, 0x95, 0xb6, 0x4b, 0x44, 0x43, 0x64, 0x21, 0x94,
	0x93, 0x0d, 0xe1, 0x09, 0xda, 0x9a, 0x1f, 0x43, 0xa5, 0x22, 0xa7, 0xa5, 0x52, 0x25, 0x90, 0xdc,
	0x78, 0x15, 0xac, 0xa6, 0x5e, 0xb3, 0xbb, 0x89, 0xe8, 0x95, 0xa7, 0xe0, 0x7d, 0x7a, 0xe1, 0xc8,
	0x23, 0xa0, 0xf2, 0x10, 0x5c, 0x91, 0x77, 0xd7, 0x8e, 0x1d, 0x92, 0x20, 0x81, 0x38, 0x25, 0xf3,
	0xcd, 0xf8, 0x9b, 0x99, 0xef, 0x5b, 0x7b, 0x61, 0xd7, 0x0f, 0x02, 0x46, 0x38, 0xb7, 0xf5, 0x2f,
	0x27, 0x6c, 0x1a, 0x0e, 0x09, 0xb3, 0x62, 0x46, 0x05, 0x45, 0x35, 0x0d, 0xb7, 0xb7, 0x64, 0x2c,
	0xae, 0x62, 0xc2, 0xed, 0x09, 0x4f, 0xf3, 0xe6, 0x75, 0x19, 0x1a, 0x7b, 0xaa, 0xc4, 0xf1, 0x85,
	0x8f, 0x5a, 0x50, 0x39, 0x62, 0x23, 0xd7, 0xc1, 0x46, 0xd7, 0xe8, 0x55, 0x3c, 0x15, 0xa0, 0xfb,
	0xb0, 0xa6, 0x8b, 0x5c, 0x07, 0x97, 0xba, 0x46, 0xaf, 0xec, 0xcd, 0x00, 0x84, 0xa1, 0xf6, 0x82,
	0xd1, 0x49, 0xec, 0x3a, 0xb8, 0x2c, 0x9f, 0x4a, 0x43, 0xd4, 0x85, 0xc6, 0x4b, 0xca, 0x85, 0x2e,
	0xc5, 0xb7, 0xbb, 0x46, 0x6f, 0xcd, 0xcb, 0x43, 0x09, 0xb3, 0xfb, 0x26, 0xcd, 0x57, 0x64, 0x7e,
	0x06, 0xa0, 0x87, 0xb0, 0xee, 0x84, 0x7c, 0x48, 0xa7, 0x84, 0x5d, 0x1d, 0x87, 0x97, 0x04, 0x57,
	0x65, 0xef, 0x22, 0x88, 0x4c, 0x68, 0xa6, 0x00, 0x09, 0xf6, 0xaf, 0x70, 0x4d, 0xd2, 0x14, 0xb0,
	0xa4, 0xcf, 0xa1, 0xcf, 0xc5, 0x2b, 0x7a, 0xee, 0x3a, 0xb8, 0xae, 0x36, 0xc8, 0x80, 0x84, 0x21,
	0x09, 0x06, 0x84, 0x44, 0xb2, 0xcd, 0x9a, 0x2c, 0x28, 0x60, 0x89, 0x32, 0x2e, 0x1f, 0x1c, 0xed,
	0x61, 0xe8, 0x1a, 0xbd, 0xba, 0xa7, 0x02, 0xf4, 0x08, 0x36, 0x5c, 0x7e, 0x1a, 0x8e, 0x83, 0xa1,
	0xcf, 0x82, 0x33, 0x1a, 0x11, 0xdc, 0x90, 0xe9, 0x39, 0x14, 0xf5, 0x60, 0xd3, 0xe5, 0xc9, 0xe2,
	0x24, 0x18, 0x28, 0x87, 0x70, 0x53, 0x16, 0xce, 0xc3, 0x89, 0x9a, 0xee, 0x28, 0xa2, 0x8c, 0x04,
	0x78, 0x5d, 0x56, 0xa4, 0x61, 0x92, 0x71, 0xc8, 0x98, 0x08, 0x12, 0xe0, 0x0d, 0x95, 0xd1, 0xa1,
	0xf9, 0xd3, 0x80, 0x75, 0xad, 0xd9, 0xf3, 0x70, 0x2c, 0x08, 0x5b, 0xe2, 0x63, 0xce, 0xa9, 0x52,
	0xd1, 0xa9, 0x16, 0x54, 0x06, 0xc2, 0x67, 0x42, 0x3b, 0xa8, 0x82, 0x04, 0x3d, 0x0c, 0x2f, 0x43,
	0x21, 0x9d, 0xab, 0x78, 0x2a, 0x48, 0x5c, 0x3d, 0x0d, 0xc5, 0x87, 0x74, 0xca, 0x8a, 0x9c, 0x25,
	0x0f, 0x25, 0x7a, 0xea, 0xbf, 0x6f, 0xfd, 0xf1, 0x44, 0xd9, 0x56, 0xf7, 0x0a, 0x58, 0xca, 0x92,
	0x6e, 0x54, 0x9b, 0xb1, 0x68, 0x48, 0xfa, 0xaa, 0xfe, 0x2a, 0x96, 0xba, 0x62, 0xc9, 0x63, 0x26,
	0x83, 0x3b, 0x7a, 0x71, 0xc2, 0x3d, 0xf2, 0x71, 0x42, 0xb8, 0x40, 0x16, 0x34, 0x4e, 0x38, 0x61,
	0x07, 0x34, 0x12, 0xe4, 0x93, 0x90, 0x0a, 0x34, 0xfa, 0x4d, 0x2b, 0x87, 0x79, 0xf9, 0x02, 0x64,
	0x41, 0x55, 0xa9, 0x26, 0x45, 0x69, 0xf4, 0xb7, 0x2d, 0xfd, 0xd2, 0x58, 0x05, 0x4d, 0x3d, 0x5d,
	0x65, 0xbe, 0x83, 0xbb, 0xb9, 0x9e, 0x3c, 0xa6, 0x11, 0x27, 0x4b, 0x04, 0xef, 0x67, 0x2f, 0x0e,
	0xe1, 0x9a, 0xbd, 0x35, 0xcf, 0x9e, 0xbc, 0x77, 0xde, 0xac, 0xcc, 0xf4, 0x61, 0xeb, 0x80, 0x4e,
	0x22, 0xf1, 0xcf, 0x7b, 0x2d, 0x75, 0xdb, 0x7c, 0x0f, 0xdb, 0xf3, 0x2d, 0x56, 0xae, 0xb1, 0xf2,
	0xdc, 0x48, 0xa6, 0xf4, 0xdc, 0xc8, 0xc0, 0x9c, 0x42, 0xeb, 0x24, 0x0e, 0x7c, 0x41, 0x74, 0x83,
	0xbf, 0x77, 0xa6, 0x96, 0x7e, 0x1b, 0x56, 0x89, 0x97, 0x16, 0x99, 0xcf, 0x60, 0xa7, 0xd0, 0xf7,
	0x8f, 0x8b, 0x65, 0xe3, 0x97, 0xf2, 0xe3, 0x7f, 0x36, 0x60, 0x5b, 0x9d, 0xb2, 0xff, 0xe7, 0x01,
	0xea, 0x00, 0x64, 0x9f, 0x50, 0x8e, 0xcb, 0xdd, 0x72, 0xaf, 0xec, 0xe5, 0x10, 0xd3, 0x86, 0x9d,
	0xdf, 0x66, 0x58, 0xb5, 0x4b, 0xff, 0xba, 0x94, 0xa9, 0x85, 0x9c, 0xdc, 0xb9, 0x43, 0xf7, 0xe6,
	0x45, 0xcb, 0xd6, 0x69, 0xb7, 0x17, 0xa5, 0x54, 0x97, 0xc7, 0x06, 0x3a, 0x86, 0xcd, 0x39, 0x39,
	0xd1, 0x6e, 0xf6, 0xc0, 0x22, 0x83, 0xdb, 0xdd, 0xc5, 0xe9, 0x19, 0x6b, 0xcf, 0x40, 0x47, 0xd0,
	0xd4, 0xb0, 0x54, 0x1b, 0x75, 0xb2, 0x67, 0x16, 0x1e, 0xfb, 0xf6, 0x83, 0xa5, 0x79, 0x2d, 0xc7,
	0x6b, 0xa8, 0x2a, 0xa5, 0xd0, 0xac, 0x74, 0xb1, 0x7d, 0xb9, 0xf9, 0x96, 0x68, 0xbb, 0xef, 0x7c,
	0xbd, 0xe9, 0x18, 0xdf, 0x6e, 0x3a, 0xc6, 0xf7, 0x9b, 0x8e, 0xf1, 0xe5, 0x47, 0xe7, 0xd6, 0x59,
	0x7f, 0x44, 0xe3, 0x8b, 0x91, 0x35, 0x0e, 0xa3, 0x0b, 0x3f, 0xb4, 0x42, 0x6a, 0x4f, 0x9f, 0xd8,
	0x8c, 0xc4, 0x94, 0xdb, 0xfe, 0xa5, 0x2d, 0x6f, 0xd1, 0xa1, 0xbe, 0x74, 0xb3, 0x4b, 0xf8, 0xbc,
	0x2a, 0xf1, 0xa7, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa6, 0xab, 0xc3, 0xe6, 0x9e, 0x07, 0x00,
	0x00,
}
