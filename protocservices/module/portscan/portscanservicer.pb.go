// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: module/portscan/portscanservicer.proto

package portscan // import "github.com/linkai-io/am/protocservices/module/portscan"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import prototypes "github.com/linkai-io/am/protocservices/prototypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddGroupRequest struct {
	UserContext          *prototypes.UserContext `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	Group                *prototypes.Group       `protobuf:"bytes,2,opt,name=Group" json:"Group,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *AddGroupRequest) Reset()         { *m = AddGroupRequest{} }
func (m *AddGroupRequest) String() string { return proto.CompactTextString(m) }
func (*AddGroupRequest) ProtoMessage()    {}
func (*AddGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_portscanservicer_0dbd52f65a4f0ac1, []int{0}
}
func (m *AddGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddGroupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AddGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddGroupRequest.Merge(dst, src)
}
func (m *AddGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddGroupRequest proto.InternalMessageInfo

func (m *AddGroupRequest) GetUserContext() *prototypes.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *AddGroupRequest) GetGroup() *prototypes.Group {
	if m != nil {
		return m.Group
	}
	return nil
}

type GroupAddedResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupAddedResponse) Reset()         { *m = GroupAddedResponse{} }
func (m *GroupAddedResponse) String() string { return proto.CompactTextString(m) }
func (*GroupAddedResponse) ProtoMessage()    {}
func (*GroupAddedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_portscanservicer_0dbd52f65a4f0ac1, []int{1}
}
func (m *GroupAddedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupAddedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupAddedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GroupAddedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupAddedResponse.Merge(dst, src)
}
func (m *GroupAddedResponse) XXX_Size() int {
	return m.Size()
}
func (m *GroupAddedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupAddedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GroupAddedResponse proto.InternalMessageInfo

type RemoveGroupRequest struct {
	UserContext          *prototypes.UserContext `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	OrgID                int32                   `protobuf:"varint,2,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	GroupID              int32                   `protobuf:"varint,3,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *RemoveGroupRequest) Reset()         { *m = RemoveGroupRequest{} }
func (m *RemoveGroupRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveGroupRequest) ProtoMessage()    {}
func (*RemoveGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_portscanservicer_0dbd52f65a4f0ac1, []int{2}
}
func (m *RemoveGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveGroupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RemoveGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveGroupRequest.Merge(dst, src)
}
func (m *RemoveGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveGroupRequest proto.InternalMessageInfo

func (m *RemoveGroupRequest) GetUserContext() *prototypes.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *RemoveGroupRequest) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *RemoveGroupRequest) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

type GroupRemovedResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupRemovedResponse) Reset()         { *m = GroupRemovedResponse{} }
func (m *GroupRemovedResponse) String() string { return proto.CompactTextString(m) }
func (*GroupRemovedResponse) ProtoMessage()    {}
func (*GroupRemovedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_portscanservicer_0dbd52f65a4f0ac1, []int{3}
}
func (m *GroupRemovedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupRemovedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupRemovedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GroupRemovedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupRemovedResponse.Merge(dst, src)
}
func (m *GroupRemovedResponse) XXX_Size() int {
	return m.Size()
}
func (m *GroupRemovedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupRemovedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GroupRemovedResponse proto.InternalMessageInfo

type AnalyzeRequest struct {
	UserContext          *prototypes.UserContext `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	Address              *prototypes.AddressData `protobuf:"bytes,2,opt,name=Address" json:"Address,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *AnalyzeRequest) Reset()         { *m = AnalyzeRequest{} }
func (m *AnalyzeRequest) String() string { return proto.CompactTextString(m) }
func (*AnalyzeRequest) ProtoMessage()    {}
func (*AnalyzeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_portscanservicer_0dbd52f65a4f0ac1, []int{4}
}
func (m *AnalyzeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnalyzeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnalyzeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AnalyzeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalyzeRequest.Merge(dst, src)
}
func (m *AnalyzeRequest) XXX_Size() int {
	return m.Size()
}
func (m *AnalyzeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalyzeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AnalyzeRequest proto.InternalMessageInfo

func (m *AnalyzeRequest) GetUserContext() *prototypes.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *AnalyzeRequest) GetAddress() *prototypes.AddressData {
	if m != nil {
		return m.Address
	}
	return nil
}

type AnalyzedResponse struct {
	Address              *prototypes.AddressData `protobuf:"bytes,1,opt,name=Address" json:"Address,omitempty"`
	PortResult           *prototypes.PortResults `protobuf:"bytes,2,opt,name=PortResult" json:"PortResult,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *AnalyzedResponse) Reset()         { *m = AnalyzedResponse{} }
func (m *AnalyzedResponse) String() string { return proto.CompactTextString(m) }
func (*AnalyzedResponse) ProtoMessage()    {}
func (*AnalyzedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_portscanservicer_0dbd52f65a4f0ac1, []int{5}
}
func (m *AnalyzedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnalyzedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnalyzedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AnalyzedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalyzedResponse.Merge(dst, src)
}
func (m *AnalyzedResponse) XXX_Size() int {
	return m.Size()
}
func (m *AnalyzedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalyzedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AnalyzedResponse proto.InternalMessageInfo

func (m *AnalyzedResponse) GetAddress() *prototypes.AddressData {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *AnalyzedResponse) GetPortResult() *prototypes.PortResults {
	if m != nil {
		return m.PortResult
	}
	return nil
}

func init() {
	proto.RegisterType((*AddGroupRequest)(nil), "module.AddGroupRequest")
	proto.RegisterType((*GroupAddedResponse)(nil), "module.GroupAddedResponse")
	proto.RegisterType((*RemoveGroupRequest)(nil), "module.RemoveGroupRequest")
	proto.RegisterType((*GroupRemovedResponse)(nil), "module.GroupRemovedResponse")
	proto.RegisterType((*AnalyzeRequest)(nil), "module.AnalyzeRequest")
	proto.RegisterType((*AnalyzedResponse)(nil), "module.AnalyzedResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PortScanModuleClient is the client API for PortScanModule service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PortScanModuleClient interface {
	AddGroup(ctx context.Context, in *AddGroupRequest, opts ...grpc.CallOption) (*GroupAddedResponse, error)
	RemoveGroup(ctx context.Context, in *RemoveGroupRequest, opts ...grpc.CallOption) (*GroupRemovedResponse, error)
	Analyze(ctx context.Context, in *AnalyzeRequest, opts ...grpc.CallOption) (*AnalyzedResponse, error)
}

type portScanModuleClient struct {
	cc *grpc.ClientConn
}

func NewPortScanModuleClient(cc *grpc.ClientConn) PortScanModuleClient {
	return &portScanModuleClient{cc}
}

func (c *portScanModuleClient) AddGroup(ctx context.Context, in *AddGroupRequest, opts ...grpc.CallOption) (*GroupAddedResponse, error) {
	out := new(GroupAddedResponse)
	err := c.cc.Invoke(ctx, "/module.PortScanModule/AddGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portScanModuleClient) RemoveGroup(ctx context.Context, in *RemoveGroupRequest, opts ...grpc.CallOption) (*GroupRemovedResponse, error) {
	out := new(GroupRemovedResponse)
	err := c.cc.Invoke(ctx, "/module.PortScanModule/RemoveGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portScanModuleClient) Analyze(ctx context.Context, in *AnalyzeRequest, opts ...grpc.CallOption) (*AnalyzedResponse, error) {
	out := new(AnalyzedResponse)
	err := c.cc.Invoke(ctx, "/module.PortScanModule/Analyze", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortScanModuleServer is the server API for PortScanModule service.
type PortScanModuleServer interface {
	AddGroup(context.Context, *AddGroupRequest) (*GroupAddedResponse, error)
	RemoveGroup(context.Context, *RemoveGroupRequest) (*GroupRemovedResponse, error)
	Analyze(context.Context, *AnalyzeRequest) (*AnalyzedResponse, error)
}

func RegisterPortScanModuleServer(s *grpc.Server, srv PortScanModuleServer) {
	s.RegisterService(&_PortScanModule_serviceDesc, srv)
}

func _PortScanModule_AddGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortScanModuleServer).AddGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.PortScanModule/AddGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortScanModuleServer).AddGroup(ctx, req.(*AddGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortScanModule_RemoveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortScanModuleServer).RemoveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.PortScanModule/RemoveGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortScanModuleServer).RemoveGroup(ctx, req.(*RemoveGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortScanModule_Analyze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortScanModuleServer).Analyze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.PortScanModule/Analyze",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortScanModuleServer).Analyze(ctx, req.(*AnalyzeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PortScanModule_serviceDesc = grpc.ServiceDesc{
	ServiceName: "module.PortScanModule",
	HandlerType: (*PortScanModuleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddGroup",
			Handler:    _PortScanModule_AddGroup_Handler,
		},
		{
			MethodName: "RemoveGroup",
			Handler:    _PortScanModule_RemoveGroup_Handler,
		},
		{
			MethodName: "Analyze",
			Handler:    _PortScanModule_Analyze_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "module/portscan/portscanservicer.proto",
}

func (m *AddGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPortscanservicer(dAtA, i, uint64(m.UserContext.Size()))
		n1, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Group != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPortscanservicer(dAtA, i, uint64(m.Group.Size()))
		n2, err := m.Group.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GroupAddedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupAddedResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RemoveGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPortscanservicer(dAtA, i, uint64(m.UserContext.Size()))
		n3, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.OrgID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPortscanservicer(dAtA, i, uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPortscanservicer(dAtA, i, uint64(m.GroupID))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GroupRemovedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupRemovedResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnalyzeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnalyzeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPortscanservicer(dAtA, i, uint64(m.UserContext.Size()))
		n4, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Address != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPortscanservicer(dAtA, i, uint64(m.Address.Size()))
		n5, err := m.Address.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnalyzedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnalyzedResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Address != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPortscanservicer(dAtA, i, uint64(m.Address.Size()))
		n6, err := m.Address.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.PortResult != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPortscanservicer(dAtA, i, uint64(m.PortResult.Size()))
		n7, err := m.PortResult.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintPortscanservicer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AddGroupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovPortscanservicer(uint64(l))
	}
	if m.Group != nil {
		l = m.Group.Size()
		n += 1 + l + sovPortscanservicer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupAddedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveGroupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovPortscanservicer(uint64(l))
	}
	if m.OrgID != 0 {
		n += 1 + sovPortscanservicer(uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		n += 1 + sovPortscanservicer(uint64(m.GroupID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupRemovedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnalyzeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovPortscanservicer(uint64(l))
	}
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovPortscanservicer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnalyzedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovPortscanservicer(uint64(l))
	}
	if m.PortResult != nil {
		l = m.PortResult.Size()
		n += 1 + l + sovPortscanservicer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPortscanservicer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPortscanservicer(x uint64) (n int) {
	return sovPortscanservicer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPortscanservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPortscanservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPortscanservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &prototypes.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPortscanservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPortscanservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Group == nil {
				m.Group = &prototypes.Group{}
			}
			if err := m.Group.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPortscanservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPortscanservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupAddedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPortscanservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupAddedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupAddedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPortscanservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPortscanservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPortscanservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPortscanservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPortscanservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &prototypes.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPortscanservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPortscanservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPortscanservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPortscanservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupRemovedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPortscanservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupRemovedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupRemovedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPortscanservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPortscanservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnalyzeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPortscanservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnalyzeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnalyzeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPortscanservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPortscanservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &prototypes.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPortscanservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPortscanservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &prototypes.AddressData{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPortscanservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPortscanservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnalyzedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPortscanservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnalyzedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnalyzedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPortscanservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPortscanservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &prototypes.AddressData{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPortscanservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPortscanservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PortResult == nil {
				m.PortResult = &prototypes.PortResults{}
			}
			if err := m.PortResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPortscanservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPortscanservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPortscanservicer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPortscanservicer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPortscanservicer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPortscanservicer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPortscanservicer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPortscanservicer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPortscanservicer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPortscanservicer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPortscanservicer   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("module/portscan/portscanservicer.proto", fileDescriptor_portscanservicer_0dbd52f65a4f0ac1)
}

var fileDescriptor_portscanservicer_0dbd52f65a4f0ac1 = []byte{
	// 424 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0xc1, 0x8a, 0xd4, 0x40,
	0x10, 0x35, 0xca, 0xcc, 0x48, 0xcd, 0xb2, 0x4a, 0x33, 0x8e, 0x31, 0x2c, 0x41, 0x72, 0x58, 0x3c,
	0x68, 0x07, 0x56, 0xf0, 0xe2, 0x41, 0xa2, 0x03, 0xeb, 0x1e, 0x44, 0x69, 0xf1, 0xe2, 0x45, 0x7a,
	0xd3, 0xc5, 0x4c, 0x30, 0x49, 0xc7, 0xee, 0xce, 0xe2, 0xfa, 0x25, 0x7e, 0x92, 0x47, 0x6f, 0x5e,
	0x65, 0xfc, 0x11, 0x99, 0xee, 0x24, 0xdb, 0x9b, 0x05, 0x0f, 0xee, 0xad, 0xeb, 0xbd, 0xaa, 0x7a,
	0x45, 0xbd, 0x6a, 0x38, 0xac, 0xa4, 0x68, 0x4b, 0x4c, 0x1b, 0xa9, 0x8c, 0xce, 0x79, 0x3d, 0x3c,
	0x34, 0xaa, 0xb3, 0x22, 0x47, 0x45, 0x1b, 0x25, 0x8d, 0x24, 0x53, 0x97, 0x17, 0x85, 0x36, 0x34,
	0xe7, 0x0d, 0xea, 0x94, 0x0b, 0xa1, 0x50, 0x6b, 0x97, 0x11, 0x2d, 0x3d, 0x66, 0xad, 0x64, 0xdb,
	0x74, 0xf8, 0x3d, 0x0f, 0x6f, 0x75, 0xdf, 0x30, 0x7a, 0xe0, 0xc1, 0xbd, 0xa6, 0xa3, 0x92, 0x4f,
	0x70, 0x27, 0x13, 0xe2, 0x78, 0xd7, 0x83, 0xe1, 0x97, 0x16, 0xb5, 0x21, 0x14, 0xe6, 0x1f, 0x34,
	0xaa, 0x57, 0xb2, 0x36, 0xf8, 0xd5, 0x84, 0xc1, 0xc3, 0xe0, 0xd1, 0xfc, 0x68, 0x8f, 0x7a, 0x18,
	0xf3, 0x13, 0xc8, 0x01, 0x4c, 0x6c, 0x7d, 0x78, 0xd3, 0x66, 0x4e, 0xa9, 0xeb, 0xe6, 0xc0, 0x64,
	0x01, 0xc4, 0x3e, 0x32, 0x21, 0x50, 0x30, 0xd4, 0x8d, 0xac, 0x35, 0x26, 0x06, 0x08, 0xc3, 0x4a,
	0x9e, 0xe1, 0xb5, 0x94, 0x17, 0x30, 0x79, 0xab, 0xd6, 0x27, 0x2b, 0xab, 0x3c, 0x61, 0x2e, 0x20,
	0x21, 0xcc, 0x6c, 0xd7, 0x93, 0x55, 0x78, 0xcb, 0xe2, 0x7d, 0x98, 0x2c, 0x61, 0xd1, 0xe9, 0xed,
	0xa4, 0x2f, 0xa6, 0xd9, 0xc0, 0x7e, 0x56, 0xf3, 0xf2, 0xfc, 0x1b, 0xfe, 0xef, 0x24, 0x87, 0x30,
	0xcb, 0x9c, 0x43, 0xdd, 0x16, 0xf6, 0x68, 0x17, 0xaf, 0xb8, 0xe1, 0xac, 0x27, 0x93, 0x0d, 0xdc,
	0xed, 0x94, 0x06, 0x75, 0xbf, 0x36, 0xf8, 0x47, 0x2d, 0x79, 0x0c, 0xf0, 0x4e, 0x2a, 0xc3, 0x50,
	0xb7, 0xa5, 0x19, 0x64, 0x2e, 0x20, 0xcd, 0x3c, 0xfe, 0xe8, 0x57, 0x00, 0xfb, 0xbb, 0xf0, 0x7d,
	0xce, 0xeb, 0x37, 0xf6, 0x9e, 0xc8, 0x0b, 0xb8, 0xdd, 0x7b, 0x4d, 0xee, 0x53, 0x77, 0x64, 0x74,
	0xe4, 0x7e, 0x14, 0xf5, 0xc4, 0x55, 0xd7, 0xc8, 0x31, 0xcc, 0x3d, 0xd7, 0xc8, 0x90, 0x7a, 0xd5,
	0xca, 0xe8, 0xe0, 0x52, 0x9b, 0xd1, 0xc2, 0xc9, 0x73, 0x98, 0x75, 0x6b, 0x20, 0xcb, 0x61, 0x90,
	0x4b, 0x0e, 0x44, 0xe1, 0x08, 0x1f, 0x8a, 0x5f, 0xbe, 0xfe, 0xb1, 0x8d, 0x83, 0x9f, 0xdb, 0x38,
	0xf8, 0xbd, 0x8d, 0x83, 0xef, 0x7f, 0xe2, 0x1b, 0x1f, 0x9f, 0xad, 0x0b, 0xb3, 0x69, 0x4f, 0x69,
	0x2e, 0xab, 0xb4, 0x2c, 0xea, 0xcf, 0xbc, 0x78, 0x52, 0xc8, 0x94, 0x57, 0xa9, 0xbd, 0xf1, 0xbc,
	0xfb, 0x5e, 0x3a, 0x1d, 0xfd, 0xbf, 0xd3, 0xa9, 0xe5, 0x9f, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff,
	0x90, 0x49, 0x8f, 0x64, 0x99, 0x03, 0x00, 0x00,
}
