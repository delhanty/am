// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ctworker/ctworkerservicer.proto

package ctworker // import "github.com/linkai-io/am/protocservices/ctworker"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import prototypes "github.com/linkai-io/am/protocservices/prototypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetCTCertificatesRequest struct {
	Server               *prototypes.CTServer `protobuf:"bytes,1,opt,name=Server" json:"Server,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetCTCertificatesRequest) Reset()         { *m = GetCTCertificatesRequest{} }
func (m *GetCTCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*GetCTCertificatesRequest) ProtoMessage()    {}
func (*GetCTCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ctworkerservicer_7afbf5bbb450b435, []int{0}
}
func (m *GetCTCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCTCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCTCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetCTCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCTCertificatesRequest.Merge(dst, src)
}
func (m *GetCTCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCTCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCTCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCTCertificatesRequest proto.InternalMessageInfo

func (m *GetCTCertificatesRequest) GetServer() *prototypes.CTServer {
	if m != nil {
		return m.Server
	}
	return nil
}

type GetCTCertificatesResponse struct {
	Server               *prototypes.CTServer `protobuf:"bytes,1,opt,name=Server" json:"Server,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetCTCertificatesResponse) Reset()         { *m = GetCTCertificatesResponse{} }
func (m *GetCTCertificatesResponse) String() string { return proto.CompactTextString(m) }
func (*GetCTCertificatesResponse) ProtoMessage()    {}
func (*GetCTCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ctworkerservicer_7afbf5bbb450b435, []int{1}
}
func (m *GetCTCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCTCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCTCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetCTCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCTCertificatesResponse.Merge(dst, src)
}
func (m *GetCTCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCTCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCTCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCTCertificatesResponse proto.InternalMessageInfo

func (m *GetCTCertificatesResponse) GetServer() *prototypes.CTServer {
	if m != nil {
		return m.Server
	}
	return nil
}

type SetExtractorsRequest struct {
	NumExtractors        int32    `protobuf:"varint,1,opt,name=NumExtractors,proto3" json:"NumExtractors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetExtractorsRequest) Reset()         { *m = SetExtractorsRequest{} }
func (m *SetExtractorsRequest) String() string { return proto.CompactTextString(m) }
func (*SetExtractorsRequest) ProtoMessage()    {}
func (*SetExtractorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ctworkerservicer_7afbf5bbb450b435, []int{2}
}
func (m *SetExtractorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetExtractorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetExtractorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SetExtractorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetExtractorsRequest.Merge(dst, src)
}
func (m *SetExtractorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetExtractorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetExtractorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetExtractorsRequest proto.InternalMessageInfo

func (m *SetExtractorsRequest) GetNumExtractors() int32 {
	if m != nil {
		return m.NumExtractors
	}
	return 0
}

type ExtractorsSetResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExtractorsSetResponse) Reset()         { *m = ExtractorsSetResponse{} }
func (m *ExtractorsSetResponse) String() string { return proto.CompactTextString(m) }
func (*ExtractorsSetResponse) ProtoMessage()    {}
func (*ExtractorsSetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ctworkerservicer_7afbf5bbb450b435, []int{3}
}
func (m *ExtractorsSetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtractorsSetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtractorsSetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ExtractorsSetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtractorsSetResponse.Merge(dst, src)
}
func (m *ExtractorsSetResponse) XXX_Size() int {
	return m.Size()
}
func (m *ExtractorsSetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtractorsSetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExtractorsSetResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GetCTCertificatesRequest)(nil), "ctworker.GetCTCertificatesRequest")
	proto.RegisterType((*GetCTCertificatesResponse)(nil), "ctworker.GetCTCertificatesResponse")
	proto.RegisterType((*SetExtractorsRequest)(nil), "ctworker.SetExtractorsRequest")
	proto.RegisterType((*ExtractorsSetResponse)(nil), "ctworker.ExtractorsSetResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CTWorkerClient is the client API for CTWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CTWorkerClient interface {
	GetCTCertificates(ctx context.Context, in *GetCTCertificatesRequest, opts ...grpc.CallOption) (*GetCTCertificatesResponse, error)
	SetExtractors(ctx context.Context, in *SetExtractorsRequest, opts ...grpc.CallOption) (*ExtractorsSetResponse, error)
}

type cTWorkerClient struct {
	cc *grpc.ClientConn
}

func NewCTWorkerClient(cc *grpc.ClientConn) CTWorkerClient {
	return &cTWorkerClient{cc}
}

func (c *cTWorkerClient) GetCTCertificates(ctx context.Context, in *GetCTCertificatesRequest, opts ...grpc.CallOption) (*GetCTCertificatesResponse, error) {
	out := new(GetCTCertificatesResponse)
	err := c.cc.Invoke(ctx, "/ctworker.CTWorker/GetCTCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cTWorkerClient) SetExtractors(ctx context.Context, in *SetExtractorsRequest, opts ...grpc.CallOption) (*ExtractorsSetResponse, error) {
	out := new(ExtractorsSetResponse)
	err := c.cc.Invoke(ctx, "/ctworker.CTWorker/SetExtractors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CTWorkerServer is the server API for CTWorker service.
type CTWorkerServer interface {
	GetCTCertificates(context.Context, *GetCTCertificatesRequest) (*GetCTCertificatesResponse, error)
	SetExtractors(context.Context, *SetExtractorsRequest) (*ExtractorsSetResponse, error)
}

func RegisterCTWorkerServer(s *grpc.Server, srv CTWorkerServer) {
	s.RegisterService(&_CTWorker_serviceDesc, srv)
}

func _CTWorker_GetCTCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCTCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CTWorkerServer).GetCTCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctworker.CTWorker/GetCTCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CTWorkerServer).GetCTCertificates(ctx, req.(*GetCTCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CTWorker_SetExtractors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetExtractorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CTWorkerServer).SetExtractors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ctworker.CTWorker/SetExtractors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CTWorkerServer).SetExtractors(ctx, req.(*SetExtractorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CTWorker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ctworker.CTWorker",
	HandlerType: (*CTWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCTCertificates",
			Handler:    _CTWorker_GetCTCertificates_Handler,
		},
		{
			MethodName: "SetExtractors",
			Handler:    _CTWorker_SetExtractors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ctworker/ctworkerservicer.proto",
}

func (m *GetCTCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCTCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Server != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCtworkerservicer(dAtA, i, uint64(m.Server.Size()))
		n1, err := m.Server.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCTCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCTCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Server != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCtworkerservicer(dAtA, i, uint64(m.Server.Size()))
		n2, err := m.Server.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SetExtractorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetExtractorsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumExtractors != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCtworkerservicer(dAtA, i, uint64(m.NumExtractors))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ExtractorsSetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtractorsSetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintCtworkerservicer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetCTCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Server != nil {
		l = m.Server.Size()
		n += 1 + l + sovCtworkerservicer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCTCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Server != nil {
		l = m.Server.Size()
		n += 1 + l + sovCtworkerservicer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetExtractorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumExtractors != 0 {
		n += 1 + sovCtworkerservicer(uint64(m.NumExtractors))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExtractorsSetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCtworkerservicer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCtworkerservicer(x uint64) (n int) {
	return sovCtworkerservicer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetCTCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCtworkerservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCTCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCTCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtworkerservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCtworkerservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Server == nil {
				m.Server = &prototypes.CTServer{}
			}
			if err := m.Server.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCtworkerservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCtworkerservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCTCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCtworkerservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCTCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCTCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtworkerservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCtworkerservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Server == nil {
				m.Server = &prototypes.CTServer{}
			}
			if err := m.Server.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCtworkerservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCtworkerservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetExtractorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCtworkerservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetExtractorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetExtractorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumExtractors", wireType)
			}
			m.NumExtractors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCtworkerservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumExtractors |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCtworkerservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCtworkerservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtractorsSetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCtworkerservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtractorsSetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtractorsSetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCtworkerservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCtworkerservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCtworkerservicer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCtworkerservicer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCtworkerservicer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCtworkerservicer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCtworkerservicer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCtworkerservicer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCtworkerservicer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCtworkerservicer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCtworkerservicer   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("ctworker/ctworkerservicer.proto", fileDescriptor_ctworkerservicer_7afbf5bbb450b435)
}

var fileDescriptor_ctworkerservicer_7afbf5bbb450b435 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4f, 0x2e, 0x29, 0xcf,
	0x2f, 0xca, 0x4e, 0x2d, 0xd2, 0x87, 0x31, 0x8a, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x8b, 0xf4,
	0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x38, 0x60, 0xe2, 0x52, 0x92, 0x60, 0x81, 0x92, 0xca, 0x82,
	0xd4, 0x62, 0xfd, 0xe4, 0x12, 0x90, 0x32, 0x98, 0x22, 0x25, 0x5b, 0x2e, 0x09, 0xf7, 0xd4, 0x12,
	0xe7, 0x10, 0xe7, 0xd4, 0xa2, 0x92, 0xcc, 0xb4, 0xcc, 0xe4, 0xc4, 0x92, 0xd4, 0xe2, 0xa0, 0xd4,
	0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x45, 0x2e, 0xb6, 0x60, 0xb0, 0x5a, 0x09, 0x46, 0x05, 0x46,
	0x0d, 0x6e, 0x23, 0x4e, 0x3d, 0xe7, 0x10, 0x88, 0x40, 0x10, 0x54, 0x42, 0xc9, 0x8e, 0x4b, 0x12,
	0x8b, 0xf6, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x62, 0xf4, 0xdb, 0x70, 0x89, 0x04, 0xa7, 0x96,
	0xb8, 0x56, 0x94, 0x14, 0x25, 0x26, 0x97, 0xe4, 0x17, 0xc1, 0xad, 0x56, 0xe1, 0xe2, 0xf5, 0x2b,
	0xcd, 0x45, 0x88, 0x83, 0x4d, 0x60, 0x0d, 0x42, 0x15, 0x54, 0x12, 0xe7, 0x12, 0x45, 0xf0, 0x82,
	0x53, 0x4b, 0x60, 0x36, 0x1b, 0xed, 0x62, 0xe4, 0xe2, 0x70, 0x0e, 0x09, 0x07, 0xfb, 0x5e, 0x28,
	0x86, 0x4b, 0x10, 0xc3, 0x8d, 0x42, 0x4a, 0x7a, 0xb0, 0xd0, 0xd1, 0xc3, 0xe5, 0x7f, 0x29, 0x65,
	0xbc, 0x6a, 0xa0, 0x9e, 0x0c, 0xe0, 0xe2, 0x45, 0xf1, 0x81, 0x90, 0x1c, 0x42, 0x17, 0x36, 0xaf,
	0x49, 0xc9, 0x23, 0xe4, 0xb1, 0x3a, 0xde, 0xc9, 0xf1, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4,
	0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf1, 0x58, 0x8e, 0x21, 0x4a, 0x3f, 0x3d, 0xb3, 0x24, 0xa3,
	0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0x3f, 0x27, 0x33, 0x2f, 0x3b, 0x31, 0x53, 0x37, 0x33, 0x5f,
	0x3f, 0x31, 0x57, 0x1f, 0x1c, 0x87, 0xc9, 0xd0, 0x78, 0x2f, 0x86, 0x27, 0x84, 0x24, 0x36, 0xb0,
	0x84, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x26, 0xe7, 0xc0, 0x24, 0x02, 0x00, 0x00,
}
